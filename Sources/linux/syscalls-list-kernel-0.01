$ cat ./grep___NR_

./include/unistd.h:
    60	#define __NR_setup	0	/* used only by init, to get system going */
    61	#define __NR_exit	1
    62	#define __NR_fork	2
    63	#define __NR_read	3
    64	#define __NR_write	4
    65	#define __NR_open	5
    66	#define __NR_close	6
    67	#define __NR_waitpid	7
    68	#define __NR_creat	8
    69	#define __NR_link	9
    70	#define __NR_unlink	10
    71	#define __NR_execve	11
    72	#define __NR_chdir	12
    73	#define __NR_time	13
    74	#define __NR_mknod	14
    75	#define __NR_chmod	15
    76	#define __NR_chown	16
    77	#define __NR_break	17
    78	#define __NR_stat	18
    79	#define __NR_lseek	19
    80	#define __NR_getpid	20
    81	#define __NR_mount	21
    82	#define __NR_umount	22
    83	#define __NR_setuid	23
    84	#define __NR_getuid	24
    85	#define __NR_stime	25
    86	#define __NR_ptrace	26
    87	#define __NR_alarm	27
    88	#define __NR_fstat	28
    89	#define __NR_pause	29
    90	#define __NR_utime	30
    91	#define __NR_stty	31
    92	#define __NR_gtty	32
    93	#define __NR_access	33
    94	#define __NR_nice	34
    95	#define __NR_ftime	35
    96	#define __NR_sync	36
    97	#define __NR_kill	37
    98	#define __NR_rename	38
    99	#define __NR_mkdir	39
   100	#define __NR_rmdir	40
   101	#define __NR_dup	41
   102	#define __NR_pipe	42
   103	#define __NR_times	43
   104	#define __NR_prof	44
   105	#define __NR_brk	45
   106	#define __NR_setgid	46
   107	#define __NR_getgid	47
   108	#define __NR_signal	48
   109	#define __NR_geteuid	49
   110	#define __NR_getegid	50
   111	#define __NR_acct	51
   112	#define __NR_phys	52
   113	#define __NR_lock	53
   114	#define __NR_ioctl	54
   115	#define __NR_fcntl	55
   116	#define __NR_mpx	56
   117	#define __NR_setpgid	57
   118	#define __NR_ulimit	58
   119	#define __NR_uname	59
   120	#define __NR_umask	60
   121	#define __NR_chroot	61
   122	#define __NR_ustat	62
   123	#define __NR_dup2	63
   124	#define __NR_getppid	64
   125	#define __NR_getpgrp	65
   126	#define __NR_setsid	66
   134		: "0" (__NR_##name)); \
   147		: "0" (__NR_##name),"b" (a)); \
   160		: "0" (__NR_##name),"b" (a),"c" (b)); \
   173		: "0" (__NR_##name),"b" (a),"c" (b),"d" (c)); \

./lib/_exit.c:
     6		__asm__("int $0x80"::"a" (__NR_exit),"b" (exit_code));

./lib/open.c:
    13			:"0" (__NR_open),"b" (filename),"c" (flag),

$ cat ./grep_SYS_

./kernel/hd.c:
   120	int sys_setup(void)

./kernel/exit.c:
    10	int sys_pause(void);
    11	int sys_close(int fd);
    58	int sys_kill(int pid,int sig)
    75				sys_close(i);
    94	int sys_exit(int error_code)
    99	int sys_waitpid(pid_t pid,int * stat_addr, int options)
   126			sys_pause();

./kernel/sys.c:
    10	int sys_ftime()
    15	int sys_mknod()
    20	int sys_break()
    25	int sys_mount()
    30	int sys_umount()
    35	int sys_ustat(int dev,struct ustat * ubuf)
    40	int sys_ptrace()
    45	int sys_stty()
    50	int sys_gtty()
    55	int sys_rename()
    60	int sys_prof()
    65	int sys_setgid(int gid)
    77	int sys_acct()
    82	int sys_phys()
    87	int sys_lock()
    92	int sys_mpx()
    97	int sys_ulimit()
   102	int sys_time(long * tloc)
   114	int sys_setuid(int uid)
   126	int sys_stime(long * tptr)
   134	int sys_times(struct tms * tbuf)
   146	int sys_brk(unsigned long end_data_seg)
   159	int sys_setpgid(int pid, int pgid)
   179	int sys_getpgrp(void)
   184	int sys_setsid(void)
   196	int sys_uname(struct utsname * name)
   210	int sys_umask(int mask)

./kernel/sched.c:
   107	int sys_pause(void)
   171	int sys_alarm(long seconds)
   177	int sys_getpid(void)
   182	int sys_getppid(void)
   187	int sys_getuid(void)
   192	int sys_geteuid(void)
   197	int sys_getgid(void)
   202	int sys_getegid(void)
   207	int sys_nice(long increment)
   214	int sys_signal(long signal,long addr,long restorer)

./kernel/system_call.s:
    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
    53	bad_sys_call:
    58		pushl $ret_from_sys_call
    63		ja bad_sys_call
    75		call _sys_call_table(,%eax,4)
    82	ret_from_sys_call:
   151		pushl %ebx		# is saved as we use that in ret_sys_call
   166		jmp ret_from_sys_call
   169	_sys_execve:
   177	_sys_fork:

./fs/pipe.c:
    52	int sys_pipe(unsigned long * fildes)

./fs/exec.c:
    11	extern int sys_exit(int exit_code);
    12	extern int sys_close(int fd);
   283				sys_close(i);
   299			sys_exit(-1);

./fs/stat.c:
    31	int sys_stat(char * filename, struct stat * statbuf)
    43	int sys_fstat(unsigned int fd, struct stat * statbuf)

./fs/read_write.c:
    19	int sys_lseek(unsigned int fd,off_t offset, int origin)
    49	int sys_read(unsigned int fd,char * buf,int count)
    77	int sys_write(unsigned int fd,char * buf,int count)

./fs/ioctl.c:
    24	int sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)

./fs/fcntl.c:
    10	extern int sys_close(int fd);
    30	int sys_dup2(unsigned int oldfd, unsigned int newfd)
    32		sys_close(newfd);
    36	int sys_dup(unsigned int fildes)
    41	int sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)

./fs/namei.c:
   381	int sys_mkdir(const char * pathname, int mode)
   505	int sys_rmdir(const char * name)
   569	int sys_unlink(const char * name)
   621	int sys_link(const char * oldname, const char * newname)

./fs/buffer.c:
    37	int sys_sync(void)

./fs/open.c:
    13	int sys_utime(char * filename, struct utimbuf * times)
    32	int sys_access(const char * filename,int mode)
    56	int sys_chdir(const char * filename)
    71	int sys_chroot(const char * filename)
    86	int sys_chmod(const char * filename,int mode)
   104	int sys_chown(const char * filename,int uid,int gid)
   121	int sys_open(const char * filename,int flag,int mode)
   167	int sys_creat(const char * pathname, int mode)
   169		return sys_open(pathname, O_CREAT | O_TRUNC, mode);
   172	int sys_close(unsigned int fd)

./include/sys/wait.h:
     1	#ifndef _SYS_WAIT_H
     2	#define _SYS_WAIT_H

./include/sys/utsname.h:
     1	#ifndef _SYS_UTSNAME_H
     2	#define _SYS_UTSNAME_H

./include/sys/stat.h:
     1	#ifndef _SYS_STAT_H
     2	#define _SYS_STAT_H

./include/sys/types.h:
     1	#ifndef _SYS_TYPES_H
     2	#define _SYS_TYPES_H

./include/linux/sys.h:
     1	extern int sys_setup();
     2	extern int sys_exit();
     3	extern int sys_fork();
     4	extern int sys_read();
     5	extern int sys_write();
     6	extern int sys_open();
     7	extern int sys_close();
     8	extern int sys_waitpid();
     9	extern int sys_creat();
    10	extern int sys_link();
    11	extern int sys_unlink();
    12	extern int sys_execve();
    13	extern int sys_chdir();
    14	extern int sys_time();
    15	extern int sys_mknod();
    16	extern int sys_chmod();
    17	extern int sys_chown();
    18	extern int sys_break();
    19	extern int sys_stat();
    20	extern int sys_lseek();
    21	extern int sys_getpid();
    22	extern int sys_mount();
    23	extern int sys_umount();
    24	extern int sys_setuid();
    25	extern int sys_getuid();
    26	extern int sys_stime();
    27	extern int sys_ptrace();
    28	extern int sys_alarm();
    29	extern int sys_fstat();
    30	extern int sys_pause();
    31	extern int sys_utime();
    32	extern int sys_stty();
    33	extern int sys_gtty();
    34	extern int sys_access();
    35	extern int sys_nice();
    36	extern int sys_ftime();
    37	extern int sys_sync();
    38	extern int sys_kill();
    39	extern int sys_rename();
    40	extern int sys_mkdir();
    41	extern int sys_rmdir();
    42	extern int sys_dup();
    43	extern int sys_pipe();
    44	extern int sys_times();
    45	extern int sys_prof();
    46	extern int sys_brk();
    47	extern int sys_setgid();
    48	extern int sys_getgid();
    49	extern int sys_signal();
    50	extern int sys_geteuid();
    51	extern int sys_getegid();
    52	extern int sys_acct();
    53	extern int sys_phys();
    54	extern int sys_lock();
    55	extern int sys_ioctl();
    56	extern int sys_fcntl();
    57	extern int sys_mpx();
    58	extern int sys_setpgid();
    59	extern int sys_ulimit();
    60	extern int sys_uname();
    61	extern int sys_umask();
    62	extern int sys_chroot();
    63	extern int sys_ustat();
    64	extern int sys_dup2();
    65	extern int sys_getppid();
    66	extern int sys_getpgrp();
    67	extern int sys_setsid();
    69	fn_ptr sys_call_table[] = { sys_setup, sys_exit, sys_fork, sys_read,
    70	sys_write, sys_open, sys_close, sys_waitpid, sys_creat, sys_link,
    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
    72	sys_chown, sys_break, sys_stat, sys_lseek, sys_getpid, sys_mount,
    73	sys_umount, sys_setuid, sys_getuid, sys_stime, sys_ptrace, sys_alarm,
    74	sys_fstat, sys_pause, sys_utime, sys_stty, sys_gtty, sys_access,
    75	sys_nice, sys_ftime, sys_sync, sys_kill, sys_rename, sys_mkdir,
    76	sys_rmdir, sys_dup, sys_pipe, sys_times, sys_prof, sys_brk, sys_setgid,
    77	sys_getgid, sys_signal, sys_geteuid, sys_getegid, sys_acct, sys_phys,
    78	sys_lock, sys_ioctl, sys_fcntl, sys_mpx, sys_setpgid, sys_ulimit,
    79	sys_uname, sys_umask, sys_chroot, sys_ustat, sys_dup2, sys_getppid,
    80	sys_getpgrp,sys_setsid};

./include/linux/hdreg.h:
    91		unsigned char sys_ind;		/* ? */

./grep_SYS_:
     3	   120	int sys_setup(void)
     6	    10	int sys_pause(void);
     7	    11	int sys_close(int fd);
     8	    58	int sys_kill(int pid,int sig)
     9	    75				sys_close(i);
    10	    94	int sys_exit(int error_code)
    11	    99	int sys_waitpid(pid_t pid,int * stat_addr, int options)
    12	   126			sys_pause();
    15	    10	int sys_ftime()
    16	    15	int sys_mknod()
    17	    20	int sys_break()
    18	    25	int sys_mount()
    19	    30	int sys_umount()
    20	    35	int sys_ustat(int dev,struct ustat * ubuf)
    21	    40	int sys_ptrace()
    22	    45	int sys_stty()
    23	    50	int sys_gtty()
    24	    55	int sys_rename()
    25	    60	int sys_prof()
    26	    65	int sys_setgid(int gid)
    27	    77	int sys_acct()
    28	    82	int sys_phys()
    29	    87	int sys_lock()
    30	    92	int sys_mpx()
    31	    97	int sys_ulimit()
    32	   102	int sys_time(long * tloc)
    33	   114	int sys_setuid(int uid)
    34	   126	int sys_stime(long * tptr)
    35	   134	int sys_times(struct tms * tbuf)
    36	   146	int sys_brk(unsigned long end_data_seg)
    37	   159	int sys_setpgid(int pid, int pgid)
    38	   179	int sys_getpgrp(void)
    39	   184	int sys_setsid(void)
    40	   196	int sys_uname(struct utsname * name)
    41	   210	int sys_umask(int mask)
    44	   107	int sys_pause(void)
    45	   171	int sys_alarm(long seconds)
    46	   177	int sys_getpid(void)
    47	   182	int sys_getppid(void)
    48	   187	int sys_getuid(void)
    49	   192	int sys_geteuid(void)
    50	   197	int sys_getgid(void)
    51	   202	int sys_getegid(void)
    52	   207	int sys_nice(long increment)
    53	   214	int sys_signal(long signal,long addr,long restorer)
    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
    57	    53	bad_sys_call:
    58	    58		pushl $ret_from_sys_call
    59	    63		ja bad_sys_call
    60	    75		call _sys_call_table(,%eax,4)
    61	    82	ret_from_sys_call:
    62	   151		pushl %ebx		# is saved as we use that in ret_sys_call
    63	   166		jmp ret_from_sys_call
    64	   169	_sys_execve:
    65	   177	_sys_fork:
    68	    52	int sys_pipe(unsigned long * fildes)
    71	    11	extern int sys_exit(int exit_code);
    72	    12	extern int sys_close(int fd);
    73	   283				sys_close(i);
    74	   299			sys_exit(-1);
    77	    31	int sys_stat(char * filename, struct stat * statbuf)
    78	    43	int sys_fstat(unsigned int fd, struct stat * statbuf)
    81	    19	int sys_lseek(unsigned int fd,off_t offset, int origin)
    82	    49	int sys_read(unsigned int fd,char * buf,int count)
    83	    77	int sys_write(unsigned int fd,char * buf,int count)
    86	    24	int sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
    89	    10	extern int sys_close(int fd);
    90	    30	int sys_dup2(unsigned int oldfd, unsigned int newfd)
    91	    32		sys_close(newfd);
    92	    36	int sys_dup(unsigned int fildes)
    93	    41	int sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
    96	   381	int sys_mkdir(const char * pathname, int mode)
    97	   505	int sys_rmdir(const char * name)
    98	   569	int sys_unlink(const char * name)
    99	   621	int sys_link(const char * oldname, const char * newname)
   102	    37	int sys_sync(void)
   105	    13	int sys_utime(char * filename, struct utimbuf * times)
   106	    32	int sys_access(const char * filename,int mode)
   107	    56	int sys_chdir(const char * filename)
   108	    71	int sys_chroot(const char * filename)
   109	    86	int sys_chmod(const char * filename,int mode)
   110	   104	int sys_chown(const char * filename,int uid,int gid)
   111	   121	int sys_open(const char * filename,int flag,int mode)
   112	   167	int sys_creat(const char * pathname, int mode)
   113	   169		return sys_open(pathname, O_CREAT | O_TRUNC, mode);
   114	   172	int sys_close(unsigned int fd)
   117	     1	#ifndef _SYS_WAIT_H
   118	     2	#define _SYS_WAIT_H
   121	     1	#ifndef _SYS_UTSNAME_H
   122	     2	#define _SYS_UTSNAME_H
   125	     1	#ifndef _SYS_STAT_H
   126	     2	#define _SYS_STAT_H
   129	     1	#ifndef _SYS_TYPES_H
   130	     2	#define _SYS_TYPES_H
   133	     1	extern int sys_setup();
   134	     2	extern int sys_exit();
   135	     3	extern int sys_fork();
   136	     4	extern int sys_read();
   137	     5	extern int sys_write();
   138	     6	extern int sys_open();
   139	     7	extern int sys_close();
   140	     8	extern int sys_waitpid();
   141	     9	extern int sys_creat();
   142	    10	extern int sys_link();
   143	    11	extern int sys_unlink();
   144	    12	extern int sys_execve();
   145	    13	extern int sys_chdir();
   146	    14	extern int sys_time();
   147	    15	extern int sys_mknod();
   148	    16	extern int sys_chmod();
   149	    17	extern int sys_chown();
   150	    18	extern int sys_break();
   151	    19	extern int sys_stat();
   152	    20	extern int sys_lseek();
   153	    21	extern int sys_getpid();
   154	    22	extern int sys_mount();
   155	    23	extern int sys_umount();
   156	    24	extern int sys_setuid();
   157	    25	extern int sys_getuid();
   158	    26	extern int sys_stime();
   159	    27	extern int sys_ptrace();
   160	    28	extern int sys_alarm();
   161	    29	extern int sys_fstat();
   162	    30	extern int sys_pause();
   163	    31	extern int sys_utime();
   164	    32	extern int sys_stty();
   165	    33	extern int sys_gtty();
   166	    34	extern int sys_access();
   167	    35	extern int sys_nice();
   168	    36	extern int sys_ftime();
   169	    37	extern int sys_sync();
   170	    38	extern int sys_kill();
   171	    39	extern int sys_rename();
   172	    40	extern int sys_mkdir();
   173	    41	extern int sys_rmdir();
   174	    42	extern int sys_dup();
   175	    43	extern int sys_pipe();
   176	    44	extern int sys_times();
   177	    45	extern int sys_prof();
   178	    46	extern int sys_brk();
   179	    47	extern int sys_setgid();
   180	    48	extern int sys_getgid();
   181	    49	extern int sys_signal();
   182	    50	extern int sys_geteuid();
   183	    51	extern int sys_getegid();
   184	    52	extern int sys_acct();
   185	    53	extern int sys_phys();
   186	    54	extern int sys_lock();
   187	    55	extern int sys_ioctl();
   188	    56	extern int sys_fcntl();
   189	    57	extern int sys_mpx();
   190	    58	extern int sys_setpgid();
   191	    59	extern int sys_ulimit();
   192	    60	extern int sys_uname();
   193	    61	extern int sys_umask();
   194	    62	extern int sys_chroot();
   195	    63	extern int sys_ustat();
   196	    64	extern int sys_dup2();
   197	    65	extern int sys_getppid();
   198	    66	extern int sys_getpgrp();
   199	    67	extern int sys_setsid();
   200	    69	fn_ptr sys_call_table[] = { sys_setup, sys_exit, sys_fork, sys_read,
   201	    70	sys_write, sys_open, sys_close, sys_waitpid, sys_creat, sys_link,
   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   203	    72	sys_chown, sys_break, sys_stat, sys_lseek, sys_getpid, sys_mount,
   204	    73	sys_umount, sys_setuid, sys_getuid, sys_stime, sys_ptrace, sys_alarm,
   205	    74	sys_fstat, sys_pause, sys_utime, sys_stty, sys_gtty, sys_access,
   206	    75	sys_nice, sys_ftime, sys_sync, sys_kill, sys_rename, sys_mkdir,
   207	    76	sys_rmdir, sys_dup, sys_pipe, sys_times, sys_prof, sys_brk, sys_setgid,
   208	    77	sys_getgid, sys_signal, sys_geteuid, sys_getegid, sys_acct, sys_phys,
   209	    78	sys_lock, sys_ioctl, sys_fcntl, sys_mpx, sys_setpgid, sys_ulimit,
   210	    79	sys_uname, sys_umask, sys_chroot, sys_ustat, sys_dup2, sys_getppid,
   211	    80	sys_getpgrp,sys_setsid};
   214	    91		unsigned char sys_ind;		/* ? */
   216	./grep_SYS_:

$ cat ./grep_syscall

./init/main.c:
    17	static inline _syscall0(int,fork)
    18	static inline _syscall0(int,pause)
    19	static inline _syscall0(int,setup)
    20	static inline _syscall0(int,sync)

./include/linux/sched.h:
   147	 * Entry into gdt where to find first TSS. 0-nul, 1-cs, 2-ds, 3-syscall

./include/unistd.h:
   128	#define _syscall0(type,name) \
   141	#define _syscall1(type,name,atype,a) \
   154	#define _syscall2(type,name,atype,a,btype,b) \
   167	#define _syscall3(type,name,atype,a,btype,b,ctype,c) \

./lib/dup.c:
     4	_syscall1(int,dup,int,fd)

./lib/setsid.c:
     4	_syscall0(pid_t,setsid)

./lib/execve.c:
     4	_syscall3(int,execve,const char *,file,char **,argv,char **,envp)

./lib/close.c:
     4	_syscall1(int,close,int,fd)

./lib/write.c:
     4	_syscall3(int,write,int,fd,const char *,buf,off_t,count)

./lib/wait.c:
     5	_syscall3(pid_t,waitpid,pid_t,pid,int *,wait_stat,int,options)

$ cat ./grep_exec

./init/main.c:
     7	 * in NO COPY ON WRITE (!!!), until an execve is executed. This
   126			_exit(execve("/bin/update",NULL,NULL));
   141			_exit(execve("/bin/sh",argv,envp));

./grep___NR_:
    14	    71	#define __NR_execve	11

./boot/boot.s:
   303		.word	0x9A00		| code read/exec

./kernel/hd.c:
   153	 * This is the pointer to a routine to be executed at every hd-interrupt.

./kernel/system_call.s:
    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
   169	_sys_execve:
   172		call _do_execve

./fs/exec.c:
   108		panic("Impossibly long executable");
   186					panic("nonexistent page in exec.c");
   220	 * 'do_execve()' executes a new program.
   222	int do_execve(unsigned long * eip,long tmp,char * filename,
   227		struct exec ex;
   233			panic("execve called from supervisor mode");
   236		if (!(inode=namei(filename)))		/* get executables inode */
   252			return -ENOEXEC;
   258		ex = *((struct exec *) bh->b_data);	/* read exec-header */
   264			return -ENOEXEC;
   282			if ((current->close_on_exec>>i)&1)
   284		current->close_on_exec = 0;

./fs/fcntl.c:
    25		current->close_on_exec &= ~(1<<arg);
    51				return (current->close_on_exec>>fd)&1;
    54					current->close_on_exec |= (1<<fd);
    56					current->close_on_exec &= ~(1<<fd);

./fs/namei.c:
    19	#define MAY_EXEC 1
    26	 * is used to check for read/write/execute permissions on a file.
   221			if (!S_ISDIR(inode->i_mode) || !permission(inode,MAY_EXEC)) {

./fs/Makefile:
    19		block_dev.o char_dev.o file_dev.o stat.o exec.o pipe.o namei.o \
    46	exec.o : exec.c ../include/errno.h ../include/sys/stat.h \

./fs/open.c:
   133		current->close_on_exec &= ~(1<<fd);
   178		current->close_on_exec &= ~(1<<fd);

./include/errno.h:
    27	#define ENOEXEC		 8

./include/linux/sched.h:
    15	#error "Currently the close-on-exec-flags are in one word, max 32 files/proc"
    99		unsigned long close_on_exec;

./include/linux/sys.h:
    12	extern int sys_execve();
    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,

./include/a.out.h:
     4	#define __GNU_EXEC_MACROS__
     6	struct exec {
    18	#define N_MAGIC(exec) ((exec).a_magic)
    22	/* Code indicating object file or impure executable.  */
    24	/* Code indicating pure executable.  */
    26	/* Code indicating demand-paged executable.  */
    40	#define _N_HDROFF(x) (SEGMENT_SIZE - sizeof (struct exec))
    44	 (N_MAGIC(x) == ZMAGIC ? _N_HDROFF((x)) + sizeof (struct exec) : sizeof (struct exec))

./include/unistd.h:
    71	#define __NR_execve	11
   195	int execve(const char * filename, char ** argv, char ** envp);
   196	int execv(const char * pathname, char ** argv);
   197	int execvp(const char * file, char ** argv);
   198	int execl(const char * pathname, char * arg0, ...);
   199	int execlp(const char * file, char * arg0, ...);
   200	int execle(const char * pathname, char * arg0, ...);

./include/fcntl.h:
    26	#define F_GETFL		3	/* more flags (cloexec) */
    33	#define FD_CLOEXEC	1	/* actually anything with low bit set goes */

./grep_SYS_:
    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
    64	   169	_sys_execve:
    70	./fs/exec.c:
   144	    12	extern int sys_execve();
   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   262	    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
   270	    64	   169	_sys_execve:
   322	   144	    12	extern int sys_execve();
   380	   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,

./syscalls-list-kernel-0.01:
    15	    71	#define __NR_execve	11
   138	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
   146	   169	_sys_execve:
   152	./fs/exec.c:
   226	    12	extern int sys_execve();
   284	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   344	    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
   352	    64	   169	_sys_execve:
   404	   144	    12	extern int sys_execve();
   462	   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   498	./lib/execve.c:
   499	     4	_syscall3(int,execve,const char *,file,char **,argv,char **,envp)

./grep_exec:
     3	     7	 * in NO COPY ON WRITE (!!!), until an execve is executed. This
     4	   126			_exit(execve("/bin/update",NULL,NULL));
     5	   141			_exit(execve("/bin/sh",argv,envp));
     8	    14	    71	#define __NR_execve	11
    11	   303		.word	0x9A00		| code read/exec
    14	   153	 * This is the pointer to a routine to be executed at every hd-interrupt.
    17	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
    18	   169	_sys_execve:
    19	   172		call _do_execve
    21	./fs/exec.c:
    22	   108		panic("Impossibly long executable");
    23	   186					panic("nonexistent page in exec.c");
    24	   220	 * 'do_execve()' executes a new program.
    25	   222	int do_execve(unsigned long * eip,long tmp,char * filename,
    26	   227		struct exec ex;
    27	   233			panic("execve called from supervisor mode");
    28	   236		if (!(inode=namei(filename)))		/* get executables inode */
    29	   252			return -ENOEXEC;
    30	   258		ex = *((struct exec *) bh->b_data);	/* read exec-header */
    31	   264			return -ENOEXEC;
    32	   282			if ((current->close_on_exec>>i)&1)
    33	   284		current->close_on_exec = 0;
    36	    25		current->close_on_exec &= ~(1<<arg);
    37	    51				return (current->close_on_exec>>fd)&1;
    38	    54					current->close_on_exec |= (1<<fd);
    39	    56					current->close_on_exec &= ~(1<<fd);
    42	    19	#define MAY_EXEC 1
    43	    26	 * is used to check for read/write/execute permissions on a file.
    44	   221			if (!S_ISDIR(inode->i_mode) || !permission(inode,MAY_EXEC)) {
    47	    19		block_dev.o char_dev.o file_dev.o stat.o exec.o pipe.o namei.o \
    48	    46	exec.o : exec.c ../include/errno.h ../include/sys/stat.h \
    51	   133		current->close_on_exec &= ~(1<<fd);
    52	   178		current->close_on_exec &= ~(1<<fd);
    55	    27	#define ENOEXEC		 8
    58	    15	#error "Currently the close-on-exec-flags are in one word, max 32 files/proc"
    59	    99		unsigned long close_on_exec;
    62	    12	extern int sys_execve();
    63	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
    66	     4	#define __GNU_EXEC_MACROS__
    67	     6	struct exec {
    68	    18	#define N_MAGIC(exec) ((exec).a_magic)
    69	    22	/* Code indicating object file or impure executable.  */
    70	    24	/* Code indicating pure executable.  */
    71	    26	/* Code indicating demand-paged executable.  */
    72	    40	#define _N_HDROFF(x) (SEGMENT_SIZE - sizeof (struct exec))
    73	    44	 (N_MAGIC(x) == ZMAGIC ? _N_HDROFF((x)) + sizeof (struct exec) : sizeof (struct exec))
    76	    71	#define __NR_execve	11
    77	   195	int execve(const char * filename, char ** argv, char ** envp);
    78	   196	int execv(const char * pathname, char ** argv);
    79	   197	int execvp(const char * file, char ** argv);
    80	   198	int execl(const char * pathname, char * arg0, ...);
    81	   199	int execlp(const char * file, char * arg0, ...);
    82	   200	int execle(const char * pathname, char * arg0, ...);
    85	    26	#define F_GETFL		3	/* more flags (cloexec) */
    86	    33	#define FD_CLOEXEC	1	/* actually anything with low bit set goes */
    89	    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
    90	    64	   169	_sys_execve:
    91	    70	./fs/exec.c:
    92	   144	    12	extern int sys_execve();
    93	   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
    94	   262	    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
    95	   270	    64	   169	_sys_execve:
    96	   322	   144	    12	extern int sys_execve();
    97	   380	   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   100	    15	    71	#define __NR_execve	11
   101	   138	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
   102	   146	   169	_sys_execve:
   103	   152	./fs/exec.c:
   104	   226	    12	extern int sys_execve();
   105	   284	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   106	   344	    56	    50	.globl _system_call,_sys_fork,_timer_interrupt,_hd_interrupt,_sys_execve
   107	   352	    64	   169	_sys_execve:
   108	   404	   144	    12	extern int sys_execve();
   109	   462	   202	    71	sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,
   110	   498	./lib/execve.c:
   111	   499	     4	_syscall3(int,execve,const char *,file,char **,argv,char **,envp)
   113	./grep_exec:

./lib/execve.c:
     4	_syscall3(int,execve,const char *,file,char **,argv,char **,envp)

./lib/Makefile:
    28		execve.o wait.o string.o

./grep_syscall:
    23	./lib/execve.c:
    24	     4	_syscall3(int,execve,const char *,file,char **,argv,char **,envp)
