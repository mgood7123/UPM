.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Declare::Constraints::Simple::Library 3"
.TH Declare::Constraints::Simple::Library 3 "2006-09-14" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Declare::Constraints::Simple::Library \- Constraint Library Bundle
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module functions as bundle of all default libraries, and as map
and/or reference of said ones.
.SH "LIBRARIES"
.IX Header "LIBRARIES"
.IP "Declare::Constraints::Simple::Library::General" 4
.IX Item "Declare::Constraints::Simple::Library::General"
General constraints and constraint-like elements that affect the whole
framework.
.Sp
Provides: \f(CW\*(C`Message\*(C'\fR, \f(CW\*(C`Scope\*(C'\fR, \f(CW\*(C`SetResult\*(C'\fR, \f(CW\*(C`IsValid\*(C'\fR, \f(CW\*(C`ReturnTrue\*(C'\fR,
\&\f(CW\*(C`ReturnFalse\*(C'\fR
.IP "Declare::Constraints::Simple::Library::Scalar" 4
.IX Item "Declare::Constraints::Simple::Library::Scalar"
Constraints for scalar value validation.
.Sp
Provides: \f(CW\*(C`Matches\*(C'\fR, \f(CW\*(C`IsDefined\*(C'\fR, \f(CW\*(C`HasLength\*(C'\fR, \f(CW\*(C`IsOneOf\*(C'\fR, \f(CW\*(C`IsTrue\*(C'\fR,
\&\f(CW\*(C`IsEq\*(C'\fR
.IP "Declare::Constraints::Simple::Library::Numerical" 4
.IX Item "Declare::Constraints::Simple::Library::Numerical"
These validate values by their numerical properties.
.Sp
Provides: \f(CW\*(C`IsNumber\*(C'\fR, \f(CW\*(C`IsInt\*(C'\fR
.IP "Declare::Constraints::Simple::Library::OO" 4
.IX Item "Declare::Constraints::Simple::Library::OO"
For validation of values in an object oriented manner.
.Sp
Provides: \f(CW\*(C`IsA\*(C'\fR, \f(CW\*(C`IsClass\*(C'\fR, \f(CW\*(C`IsObject\*(C'\fR, \f(CW\*(C`HasMethods\*(C'\fR
.IP "Declare::Constraints::Simple::Library::Referencial" 4
.IX Item "Declare::Constraints::Simple::Library::Referencial"
These can validate properties by their reference types.
.Sp
Provides: \f(CW\*(C`IsRefType\*(C'\fR, \f(CW\*(C`IsScalarRef\*(C'\fR, \f(CW\*(C`IsArrayRef\*(C'\fR, \f(CW\*(C`IsHashRef\*(C'\fR,
\&\f(CW\*(C`IsCodeRef\*(C'\fR, \f(CW\*(C`IsRegex\*(C'\fR
.IP "Declare::Constraints::Simple::Library::Array" 4
.IX Item "Declare::Constraints::Simple::Library::Array"
These constraints deal with array references and their contents.
.Sp
Provides: \f(CW\*(C`HasArraySize\*(C'\fR, OnArrayElements, OnEvenElements, 
OnOddElements
.IP "Declare::Constraints::Simple::Library::Hash" 4
.IX Item "Declare::Constraints::Simple::Library::Hash"
All constraints appliable to hash references as well as their keys and
values.
.Sp
Provides: \f(CW\*(C`HasAllKeys\*(C'\fR, \f(CW\*(C`OnHashKeys\*(C'\fR
.IP "Declare::Constraints::Simple::Library::Operators" 4
.IX Item "Declare::Constraints::Simple::Library::Operators"
Operators can be used in any place a constraint can be used, as
their implementations are similar.
.Sp
Provides: \f(CW\*(C`And\*(C'\fR, \f(CW\*(C`Or\*(C'\fR, \f(CW\*(C`XOr\*(C'\fR, \f(CW\*(C`Not\*(C'\fR, \f(CW\*(C`CaseValid\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Declare::Constraints::Simple
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert 'phaylon' Sedlacek \f(CW\*(C`<phaylon@dunkelheit.at>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This module is free software, you can redistribute it and/or modify it 
under the same terms as perl itself.
