.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Net::DNS::RR::SMIMEA 3"
.TH Net::DNS::RR::SMIMEA 3 "2017-08-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::RR::SMIMEA \- DNS SMIMEA resource record
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::DNS;
\&    $rr = new Net::DNS::RR(\*(Aqname SMIMEA usage selector matchingtype certificate\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1SMIMEA DNS\s0 resource record (\s-1RR\s0) is used to associate an end
entity certificate or public key with the associated email address,
thus forming a \*(L"\s-1SMIMEA\s0 certificate association\*(R".
The semantics of how the \s-1SMIMEA RR\s0 is interpreted are described in
\&\s-1RFC6698.\s0
.SH "METHODS"
.IX Header "METHODS"
The available methods are those inherited from the base class augmented
by the type-specific methods defined in this package.
.PP
Use of undocumented package features or direct access to internal data
structures is discouraged and could result in program termination or
other unpredictable behaviour.
.SS "usage"
.IX Subsection "usage"
.Vb 2
\&    $usage = $rr\->usage;
\&    $rr\->usage( $usage );
.Ve
.PP
8\-bit integer value which specifies the provided association that
will be used to match the certificate.
.SS "selector"
.IX Subsection "selector"
.Vb 2
\&    $selector = $rr\->selector;
\&    $rr\->selector( $selector );
.Ve
.PP
8\-bit integer value which specifies which part of the certificate
presented by the server will be matched against the association data.
.SS "matchingtype"
.IX Subsection "matchingtype"
.Vb 2
\&    $matchingtype = $rr\->matchingtype;
\&    $rr\->matchingtype( $matchingtype );
.Ve
.PP
8\-bit integer value which specifies how the certificate association
is presented.
.SS "certificate"
.IX Subsection "certificate"
.SS "cert"
.IX Subsection "cert"
.Vb 2
\&    $cert = $rr\->cert;
\&    $rr\->cert( $cert );
.Ve
.PP
Hexadecimal representation of the certificate data.
.SS "certbin"
.IX Subsection "certbin"
.Vb 2
\&    $certbin = $rr\->certbin;
\&    $rr\->certbin( $certbin );
.Ve
.PP
Binary representation of the certificate data.
.SS "babble"
.IX Subsection "babble"
.Vb 1
\&    print $rr\->babble;
.Ve
.PP
The \fIbabble()\fR method returns the 'BubbleBabble' representation of the
digest if the Digest::BubbleBabble package is available, otherwise
an empty string is returned.
.PP
BubbleBabble represents a message digest as a string of plausible
words, to make the digest easier to verify.  The \*(L"words\*(R" are not
necessarily real words, but they look more like words than a string
of hex characters.
.PP
The 'BubbleBabble' string is appended as a comment when the string
method is called.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)2016 Dick Franks.
.PP
All rights reserved.
.PP
Package template (c)2009,2012 O.M.Kolkman and R.W.Franks.
.SH "LICENSE"
.IX Header "LICENSE"
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided
that the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation, and that the name of the author not be used in advertising
or publicity pertaining to distribution of the software without specific
prior written permission.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::RR, \s-1RFC8162,
RFC6698\s0
