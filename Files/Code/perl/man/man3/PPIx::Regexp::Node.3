.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Node 3"
.TH PPIx::Regexp::Node 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Node \- Represent a container
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use PPIx::Regexp::Dumper;
\& PPIx::Regexp::Dumper\->new( \*(Aqqr{(foo)}\*(Aq )\->print();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Node\*(C'\fR is a
PPIx::Regexp::Element.
.PP
\&\f(CW\*(C`PPIx::Regexp::Node\*(C'\fR is the parent of PPIx::Regexp,
PPIx::Regexp::Node::Range and
PPIx::Regexp::Structure.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a structural element that contains other classes.
It is an abstract class, not instantiated by the lexer.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following public methods. Methods not documented
here are private, and unsupported in the sense that the author reserves
the right to change or remove them without notice.
.SS "child"
.IX Subsection "child"
.Vb 1
\& my $kid = $node\->child( 0 );
.Ve
.PP
This method returns the child at the given index. The indices start from
zero, and negative indices are from the end of the list, so that
\&\f(CW\*(C`$node\->child( \-1 )\*(C'\fR returns the last child of the node.
.SS "children"
.IX Subsection "children"
This method returns the children of the Node. If called in scalar
context it returns the number of children.
.SS "contains"
.IX Subsection "contains"
.Vb 1
\& print $node\->contains( $elem ) ? "yes\en" : "no\en";
.Ve
.PP
This method returns true if the given element is contained in the node,
or false otherwise.
.SS "elements"
.IX Subsection "elements"
This method returns the elements in the Node. For a
\&\f(CW\*(C`PPIx::Regexp::Node\*(C'\fR proper, it is the same as \f(CW\*(C`children()\*(C'\fR.
.SS "find"
.IX Subsection "find"
.Vb 6
\& my $rslt = $node\->find( \*(AqPPIx::Regexp::Token::Literal\*(Aq );
\& my $rslt = $node\->find( \*(AqToken::Literal\*(Aq );
\& my $rslt = $node\->find( sub {
\&     return $_[1]\->isa( \*(AqPPIx::Regexp::Token::Literal\*(Aq )
\&         && $_[1]\->ordinal < ord(\*(Aq \*(Aq);
\&     } );
.Ve
.PP
This method finds things.
.PP
If given a string as argument, it is assumed to be a class name
(possibly without the leading 'PPIx::Regexp::'), and all elements of the
given class are found.
.PP
If given a code reference, that code reference is called once for each
element, and passed \f(CW$self\fR and the element. The code should return
true to accept the element, false to reject it, and ( for subclasses of
\&\f(CW\*(C`PPIx::Regexp::Node\*(C'\fR) \f(CW\*(C`undef\*(C'\fR to prevent recursion into the node. If
the code throws an exception, you get nothing back from this method.
.PP
Either way, the return is a reference to the list of things found, a
false (but defined) value if nothing was found, or \f(CW\*(C`undef\*(C'\fR if an error
occurred.
.SS "find_parents"
.IX Subsection "find_parents"
.Vb 4
\& my $rslt = $node\->find_parents( sub {
\&     return $_[1]\->isa( \*(AqPPIx::Regexp::Token::Operator\*(Aq )
\&         && $_[1]\->content() eq \*(Aq|\*(Aq;
\&     } );
.Ve
.PP
This convenience method takes the same arguments as \f(CW\*(C`find\*(C'\fR, but instead
of the found objects themselves returns their parents. No parent will
appear more than once in the output.
.PP
This method returns a reference to the array of parents if any were
found. If no parents were found the return is false but defined. If an
error occurred the return is \f(CW\*(C`undef\*(C'\fR.
.SS "find_first"
.IX Subsection "find_first"
This method has the same arguments as \*(L"find\*(R", but returns either a
reference to the first element found, a false (but defined) value if no
elements were found, or \f(CW\*(C`undef\*(C'\fR if an error occurred.
.SS "first_element"
.IX Subsection "first_element"
This method returns the first element in the node.
.SS "last_element"
.IX Subsection "last_element"
This method returns the last element in the node.
.SS "perl_version_introduced"
.IX Subsection "perl_version_introduced"
This method returns the maximum value of \f(CW\*(C`perl_version_introduced\*(C'\fR
returned by any of its elements. In other words, it returns the minimum
version of Perl under which this node is valid. If there are no
elements, 5.000 is returned, since that is the minimum value of Perl
supported by this package.
.SS "perl_version_removed"
.IX Subsection "perl_version_removed"
This method returns the minimum defined value of \f(CW\*(C`perl_version_removed\*(C'\fR
returned by any of the node's elements. In other words, it returns the
lowest version of Perl in which this node is \f(CW\*(C`not\*(C'\fR valid. If there are
no elements, or if no element has a defined \f(CW\*(C`perl_version_removed\*(C'\fR,
\&\f(CW\*(C`undef\*(C'\fR is returned.
.SS "schild"
.IX Subsection "schild"
This method returns the significant child at the given index; that is,
\&\f(CW\*(C`$node\->schild(0)\*(C'\fR returns the first significant child,
\&\f(CW\*(C`$node\->schild(1)\*(C'\fR returns the second significant child, and so on.
Negative indices count from the end.
.SS "schildren"
.IX Subsection "schildren"
This method returns the significant children of the node.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III\s0 \fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
