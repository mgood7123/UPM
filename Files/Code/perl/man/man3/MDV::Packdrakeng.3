.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MDV::Packdrakeng 3"
.TH MDV::Packdrakeng 3 "2007-08-09" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MDV::Packdrakeng \- Simple Archive Extractor/Builder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MDV::Packdrakeng;
\&
\&    # creating an archive
\&    $pack = MDV::Packdrakeng\->new(archive => "myarchive.cz");
\&    # Adding a few files
\&    $pack\->add("/path/", "file1", "file2");
\&    # Adding an unamed file
\&    open($handle, "file");
\&    $pack\->add_virtual("filename", $handle);
\&    close($handle);
\&
\&    $pack = undef;
\&
\&    # extracting an archive
\&    $pack = MDV::Packdrakeng\->open(archive => "myarchive.cz");
\&    # listing files
\&    $pack\->list();
\&    # extracting few files
\&    $pack\->extract("/path/", "file1", "file2");
\&    # extracting data into a file handle
\&    open($handle, "file");
\&    $pack\->extract_virtual($handle, "filename");
\&    close($handle);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`MDV::Packdrakeng\*(C'\fR is a simple indexed archive builder and extractor using
standard compression methods.
.SH "IMPLEMENTATION"
.IX Header "IMPLEMENTATION"
Compressed data are stored by block. For example,
.PP
.Vb 3
\& UncompresseddatA1UncompresseddatA2 UncompresseddatA3UncompresseddatA4
\& |\-\-\- size  1 \-\-\-||\-\-\- size  2 \-\-\-| |\-\-\- size  3 \-\-\-||\-\-\- size  4 \-\-\-|
\& |<\-offset1       |<\-offset2        |<\-offset3       |<\-offset4
.Ve
.PP
gives:
.PP
.Vb 3
\& CompresseD1CompresseD2 CompresseD3CompresseD4
\& |\-\-\- c. size 1, 2 \-\-\-| |\-\-\- c. size 3, 4 \-\-\-|
\& |<\-c. offset 1, 2      |<\-c. offset 3, 4
.Ve
.PP
A new block is started when its size exceeds the \f(CW\*(C`block_size\*(C'\fR value.
.PP
Compressed data are followed by the table of contents (toc), that is, a simple
list of packed files. Each file name is terminated by the \f(CW\*(C`\en\*(C'\fR character:
.PP
.Vb 10
\&    dir1
\&    dir2
\&    ...
\&    dirN
\&    symlink1
\&    point_file1
\&    symlink2
\&    point_file2
\&    ...
\&    ...
\&    symlinkN
\&    point_fileN
\&    file1
\&    file2
\&    ...
\&    fileN
.Ve
.PP
The file sizes follows, 4 values are stored for each file:
offset into archive of compressed block, size of compressed block,
offset into block of the file and the file's size.
.PP
Finally the archive contains a 64\-byte trailer, about the
toc and the archive itself:
.PP
.Vb 7
\&    \*(Aqcz[0\*(Aq, strings 4 bytes
\&    number of directory, 4 bytes
\&    number of symlinks, 4 bytes
\&    number of files, 4 bytes
\&    the toc size, 4 bytes
\&    the uncompression command, string of 40 bytes length
\&    \*(Aq0]cz\*(Aq, string 4 bytes
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fBnew(%options)\fR" 2
.IX Item "new(%options)"
Creates a new archive.
Options:
.RS 2
.IP "archive" 4
.IX Item "archive"
The file name of the archive. If the file doesn't exist, it will be created,
else it will be owerwritten. See \f(CW\*(C`open\*(C'\fR.
.IP "compress" 4
.IX Item "compress"
The application to use to compress, if unspecified, gzip is used.
.IP "uncompress" 4
.IX Item "uncompress"
The application used to extract data from archive. This option is useless if
you're opening an existing archive (unless you want to force it).
If unset, this value is based on compress command followed by '\-d' argument.
.IP "extern" 4
.IX Item "extern"
If you're using gzip, by default MDV::Packdrakeng will use perl-zlib to save system
ressources. This option forces MDV::Packdrakeng to use the external gzip command. This
has no meaning with other compress programs as internal functions are not implemented
yet.
.IP "comp_level" 4
.IX Item "comp_level"
The compression level passed as an argument to the compression program. By default,
this is set to 6.
.IP "block_size" 4
.IX Item "block_size"
The limit size after which we start a new compressed block. The default value
is 400KB. Set it to 0 to be sure a new block will be started for each packed
files, and \-1 to never start a new block. Be aware that a big block size will
slow down the file extraction.
.IP "quiet" 4
.IX Item "quiet"
Do not output anything, shut up.
.IP "debug" 4
.IX Item "debug"
Print debug messages.
.RE
.RS 2
.RE
.IP "\fBopen(%options)\fR" 2
.IX Item "open(%options)"
Opens an existing archive for extracting or adding files.
.Sp
The uncompression command is found into the archive, and the compression
command is deduced from it.
.Sp
If you add files, a new compressed block will be started even if the last block
is smaller than the value of the \f(CW\*(C`block_size\*(C'\fR option. If some compression
options can't be found in the archive, the new preference will be applied.
.Sp
Options are the same than for the \f(CW\*(C`new()\*(C'\fR function.
.IP "\fBMDV::Packdrakeng\->add_virtual($type, \f(CB$filename\fB, \f(CB$data\fB)\fR" 2
.IX Item "MDV::Packdrakeng->add_virtual($type, $filename, $data)"
Adds a file into archive according passed information.
\&\f(CW$type\fR gives the type of the file:
.Sp
.Vb 6
\&  \- \*(Aqd\*(Aq, the file will be a directory, store as \*(Aq$filename\*(Aq. $data is not used.
\&  \- \*(Aql\*(Aq, the file will be a symlink named $filename, pointing to the file whose path
\&    is given by the string $data.
\&  \- \*(Aqf\*(Aq, the file is a normal file, $filename will be its name, $data is either
\&         an handle to open file, data will be read from current position to the
\&         end of file, either a string to push as the content of the file.
.Ve
.IP "\fBMDV::Packdrakeng\->add($prefix, \f(CB@files\fB)\fR" 2
.IX Item "MDV::Packdrakeng->add($prefix, @files)"
Adds \f(CW@files\fR into archive located into \f(CW$prefix\fR. Only directory, files and symlink
will be added. For each file, the path should be relative to \f(CW$prefix\fR and is
stored as is.
.IP "\fBMDV::Packdrakeng\->extract_virtual(*HANDLE, \f(CB$filename\fB)\fR" 2
.IX Item "MDV::Packdrakeng->extract_virtual(*HANDLE, $filename)"
Extracts \f(CW$filename\fR data from archive into the *HANDLE. \f(CW$filename\fR should be a
normal file.
.IP "\fBMDV::Packdrakeng\->extract($destdir, \f(CB@files\fB)\fR" 2
.IX Item "MDV::Packdrakeng->extract($destdir, @files)"
Extracts \f(CW@files\fR from the archive into \f(CW$destdir\fR prefix.
.IP "\fBMDV::Packdrakeng\->\f(BIgetcontent()\fB\fR" 2
.IX Item "MDV::Packdrakeng->getcontent()"
Returns three arrayrefs describing files files into archive, respectively
directory list, files list and symlink list.
.IP "\fBMDV::Packdrakeng\->infofile($file)\fR" 2
.IX Item "MDV::Packdrakeng->infofile($file)"
Returns type and information about a given file into the archive; that is:
.Sp
.Vb 4
\&  \- \*(Aqf\*(Aq and the the size of the file for a plain file
\&  \- \*(Aql\*(Aq and the linked file for a symlink
\&  \- \*(Aqd\*(Aq and undef for a directory
\&  \- undef if the file can\*(Aqt be found into archive.
.Ve
.IP "\fBMDV::Packdrakeng\->infofile($handle)\fR" 2
.IX Item "MDV::Packdrakeng->infofile($handle)"
Print to \f(CW$handle\fR (\s-1STDOUT\s0 if not specified) the content of the archive.
.IP "\fBMDV::Packdrakeng\->dumptoc($handle)\fR" 2
.IX Item "MDV::Packdrakeng->dumptoc($handle)"
Print to \f(CW$handle\fR (\s-1STDOUT\s0 if not specified) the table of content of the archive.
.SH "CHANGELOG"
.IX Header "CHANGELOG"
.SS "1.10"
.IX Subsection "1.10"
.IP "use an oo code" 4
.IX Item "use an oo code"
.PD 0
.IP "\fIadd_virtual()\fR now accept a string as file content" 4
.IX Item "add_virtual() now accept a string as file content"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Olivier Thauvin <nanardon@mandriva.org>,
Rafael Garcia-Suarez <rgarciasuarez@mandriva.com>
.PP
Copyright (c) 2005 Mandriva
.PP
This module is a from scratch-rewrite of the original \f(CW\*(C`packdrake\*(C'\fR utility. Its
format is fully compatible with the old packdrake.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or
modify it under the terms of \s-1GNU\s0 General Public License as
published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
If you do not have a copy of the \s-1GNU\s0 General Public License write to
the Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
\&\s-1MA 02139, USA.\s0
