.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Test::Reporter::Transport 3"
.TH Test::Reporter::Transport 3 "2015-04-06" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Reporter::Transport \- base class for Test::Reporter transports
.SH "VERSION"
.IX Header "VERSION"
version 1.62
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # Defines API that must be implemented by subclasses
\&
\&    my $sender = Test::Reporter::Transport::Subclass\->new( @args );
\&
\&    $sender\->send( $report )
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Transport subclasses provide the means by which \s-1CPAN\s0 Testers reports are 
transmitted to the \s-1CPAN\s0 Testers mailing list.
.PP
This module is an abstract base class that define an \s-1API\s0 for
Test::Reporter::Transport subclasses.  Individual subclasses \s-1MUST\s0 
implement the methods described below.
.SH "USAGE"
.IX Header "USAGE"
A transport method is specified to Test::Reporter using the \f(CW\*(C`transport\*(C'\fR
option.  The \f(CW\*(C`transport\*(C'\fR option expects just the module \*(L"suffix\*(R" that follows
\&\f(CW\*(C`Test::Reporter::Transport\*(C'\fR.  For example:
.PP
.Vb 4
\&    # use Test::Reporter::Transport::Null for transport
\&    my $report = Test::Reporter\->new(
\&        transport => \*(AqNull\*(Aq
\&    );
.Ve
.PP
Configuration of the transport is specified with the \f(CW\*(C`transport_args\*(C'\fR
option:
.PP
.Vb 4
\&    my $report = Test::Reporter\->new(
\&        transport => \*(AqFile\*(Aq,
\&        transport_args => [ dir => \*(Aq/tmp\*(Aq ],
\&    );
.Ve
.PP
These may also be specified with the \f(CW\*(C`transport\*(C'\fR or \f(CW\*(C`transport_args\*(C'\fR methods:
.PP
.Vb 1
\&    $report\->transport_args( dir => \*(Aq/tmp\*(Aq );
.Ve
.PP
These may also be combined in the \f(CW\*(C`transport\*(C'\fR method itself:
.PP
.Vb 1
\&    $report\->transport( \*(AqFile\*(Aq, dir => \*(Aq/tmp\*(Aq );
.Ve
.SH "METHODS"
.IX Header "METHODS"
The terms 'may', 'must', 'should', etc. used below have their usual \s-1RFC\s0
meanings.
.SS "new"
.IX Subsection "new"
.Vb 1
\&    my $sender = $subclass\->new( @args );
.Ve
.PP
The \f(CW\*(C`new\*(C'\fR method is the object constructor.  It \s-1MAY\s0 take a list of any
necessary configuration options.  It \s-1MUST\s0 return a transport object if one
is successfully created or undef if the object can not be created.
.SS "send"
.IX Subsection "send"
.Vb 1
\&    $sender\->send( $report );
.Ve
.PP
The \f(CW\*(C`send\*(C'\fR method \s-1MUST\s0 take a Test::Reporter object as its only argument.  It
\&\s-1MUST\s0 return true if the report is successfully sent.  It \s-1SHOULD\s0 die with a
message describing the failure if a report cannot be sent.  It \s-1MUST NOT\s0 return
a true value if the report cannot be sent.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Adam J. Foxson <afoxson@pobox.com>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Kirrily \*(L"Skud\*(R" Robert <skud@cpan.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.IP "\(bu" 4
Richard Soderberg <rsod@cpan.org>
.IP "\(bu" 4
Kurt Starsinic <Kurt.Starsinic@isinet.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Authors and Contributors.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
