.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Declare::Constraints::Simple::Result 3"
.TH Declare::Constraints::Simple::Result 3 "2006-09-11" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Declare::Constraints::Simple::Result \- Validation Result
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $result = $constraint\->($value);
\&
\&  my $message = $result\->message;
\&  my $path    = $result\->path;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This represents a result returned by a Declare::Constraints::Simple
constraint. Objects of this kind overload their boolean context, so the
value of the \fIis_valid()\fR accessor is reflected to it.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
Constructor. As you will mostly just receive result objects, you should 
never be required to call this yourself.
.SS "set_valid($bool)"
.IX Subsection "set_valid($bool)"
Sets the results validity flag.
.SS "\fIis_valid()\fP"
.IX Subsection "is_valid()"
Boolean accessor telling if this is a true result or not.
.SS "set_message($message)"
.IX Subsection "set_message($message)"
The error message. Useful only on non-valid results.
.SS "\fImessage()\fP"
.IX Subsection "message()"
Returns the message of the result object.
.SS "add_to_stack($constraint_name)"
.IX Subsection "add_to_stack($constraint_name)"
This adds another level at the beginning (!) of the results constraint
stack. This is mostly intended to use for the \f(CW\*(C`prepare_generator\*(C'\fRmethod
in Declare::Constraints::Simple::Library package.
.SS "path([$separator])"
.IX Subsection "path([$separator])"
Returns a string containing the \fIstack()\fR contents joined together by
the \f(CW$separator\fR string (defaulting to \f(CW\*(C`.\*(C'\fR).
.SS "\fIstack()\fP"
.IX Subsection "stack()"
Returns an array reference containing the results currrent stack. This
is a list of the constraints path parts. This is usually just the
constraints name. If there's additional info, it is appended to the
name like \f(CW\*(C`[$info]\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Declare::Constraints::Simple
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert 'phaylon' Sedlacek \f(CW\*(C`<phaylon@dunkelheit.at>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This module is free software, you can redistribute it and/or modify it 
under the same terms as perl itself.
