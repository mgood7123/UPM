.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "IO::Prompt::Tiny 3"
.TH IO::Prompt::Tiny 3 "2015-03-30" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Prompt::Tiny \- Prompt for user input with a default option
.SH "VERSION"
.IX Header "VERSION"
version 0.003
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IO::Prompt::Tiny qw/prompt/;
\&
\&  my $answer = prompt("Yes or no? (y/n)", "n");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an extremely simple prompting module, based on the extremely simple
prompt offered by ExtUtils::MakeMaker.In many cases, that's all you need and
this module gives it to you without all the overhead of ExtUtils::MakeMaker
just to prompt for input.
.PP
It doesn't do any validation, coloring, menus, timeouts, or any of the wild,
crazy, cool stuff that other prompting modules do.  It just prompts with
a default.  That's it!
.SH "USAGE"
.IX Header "USAGE"
The following function may be explicitly imported. No functions are imported by
default.
.SS "prompt"
.IX Subsection "prompt"
.Vb 2
\&    my $value = prompt($message);
\&    my $value = prompt($message, $default);
.Ve
.PP
The \fIprompt()\fR function displays the message as a prompt for input and returns
the (chomped) response from the user, or the default if the response was
empty.
.PP
If the program is not running interactively or if the \s-1PERL_MM_USE_DEFAULT\s0
environment variable is set to true, the default will be used without
prompting.
.PP
If no default is provided, an empty string will be used instead.
.PP
Unlike \fIExtUtils::MakeMaker::prompt()\fR, this \fIprompt()\fR does not use
prototypes, so this will work as expected:
.PP
.Vb 2
\&  my @args = ($prompt, $default);
\&  prompt(@args);
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1PERL_MM_USE_DEFAULT\s0"
.IX Subsection "PERL_MM_USE_DEFAULT"
If set to a true value, IO::Prompt::Tiny will always return the default
without waiting for user input, just like ExtUtils::MakeMaker does.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
The guts of this module are based on ExtUtils::MakeMaker and
IO::Interactive::Tiny (which is based on IO::Interactive).
Thank you to the authors of those modules.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
IO::Prompt
.IP "\(bu" 4
IO::Prompt::Simple
.IP "\(bu" 4
Prompt::Timeout
.IP "\(bu" 4
Term::Prompt
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/IO\-Prompt\-Tiny/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/IO\-Prompt\-Tiny>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/IO\-Prompt\-Tiny.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
