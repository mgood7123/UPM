.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MetaCPAN::Client::Author 3"
.TH MetaCPAN::Client::Author 3 "2017-06-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MetaCPAN::Client::Author \- An Author data object
.SH "VERSION"
.IX Header "VERSION"
version 2.017000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $author = $mcpan\->author(\*(AqMICKEY\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
a MetaCPAN author entity object.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "pauseid"
.IX Subsection "pauseid"
The author's pause id, which is a string like \f(CW\*(C`MICKEY\*(C'\fR or \f(CW\*(C`XSAWYERX\*(C'\fR.
.SS "name"
.IX Subsection "name"
The author's full name, if they've provided this in their MetaCPAN
profile. This may contain Unicode characters.
.SS "ascii_name"
.IX Subsection "ascii_name"
An ASCII-only version of the author's full name, if they've provided this in
their MetaCPAN profile.
.SS "city"
.IX Subsection "city"
The author's city, if they've provided this in their MetaCPAN profile.
.SS "region"
.IX Subsection "region"
The author's region, if they've provided this in their MetaCPAN profile.
.SS "country"
.IX Subsection "country"
The author's country, if they've provided this in their MetaCPAN profile.
.SS "updated"
.IX Subsection "updated"
An \s-1ISO8601\s0 datetime string like \f(CW\*(C`2016\-11\-19T12:41:46\*(C'\fR indicating when the
author last updated their MetaCPAN profile. This is always provided in \s-1UTC.\s0
.SS "dir"
.IX Subsection "dir"
The author's \s-1CPAN\s0 directory, which is something like \f(CW\*(C`id/P/PE/PERLER\*(C'\fR.
.SS "gravatar_url"
.IX Subsection "gravatar_url"
The author's gravatar.com user \s-1URL,\s0 if they have one. This \s-1URL\s0 is generated
using PAUSEID@cpan.org.
.SS "user"
.IX Subsection "user"
The user's internal MetaCPAN id.
.SS "donation"
.IX Subsection "donation"
This is an arrayref containing zero or more hashrefs. Each hashref contains
two keys, \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`id\*(C'\fR. The known names are currently \f(CW\*(C`paypal\*(C'\fR,
\&\f(CW\*(C`wishlist\*(C'\fR, and \f(CW\*(C`flattr\*(C'\fR. The id will be an appropriate id or \s-1URL\s0 for the
thing in question.
.PP
This may be empty if the author has not provided this information in their
MetaCPAN profile.
.PP
For example:
.PP
.Vb 4
\&    [
\&        { "name" => "paypal",   "id" => "brian.d.foy@gmail.com" },
\&        { "name" => "wishlist", "id" => "http://amzn.com/w/4O7IX9ZNQJR" },
\&    ],
.Ve
.SS "email"
.IX Subsection "email"
This is an arrayref containing zero or more email addresses that the author
has added to their MetaCPAN profile. Note that this does \fInot\fR include the
\&\f(CW\*(C`AUTHOR@cpan.org\*(C'\fR email address that all \s-1CPAN\s0 authors have.
.SS "website"
.IX Subsection "website"
This is an arrayref of website URLs provided by the author in their MetaCPAN
profile.
.SS "profile"
.IX Subsection "profile"
This is an arrayref containing zero or more hashrefs. Each hashref contains
two keys, \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`id\*(C'\fR. The names are things like \f(CW\*(C`github\*(C'\fR or
\&\f(CW\*(C`stackoverflow\*(C'\fR. The id will be an appropriate id for the site in question.
.PP
For example:
.PP
.Vb 4
\&    [
\&        { name => "amazon",        id => "B002MRC39U"  },
\&        { name => "stackoverflow", id => "brian\-d\-foy" },
\&    ]
.Ve
.PP
This may be empty if the author has not provided this information in their
MetaCPAN profile.
.SS "perlmongers"
.IX Subsection "perlmongers"
This is an arrayref containing zero or more hashrefs. Each hashref contains
two keys, \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`url\*(C'\fR. The names are things like \f(CW\*(C`Minneapolis.pm\*(C'\fR.
.PP
This may be empty if the author has not provided this information in their
MetaCPAN profile.
.SS "links"
.IX Subsection "links"
This is a hashref where the keys are a link type, and the values are URLs. The
currently known keys are:
.IP "\(bu" 4
cpan_directory
.Sp
The author's \s-1CPAN\s0 directory.
.IP "\(bu" 4
backpan_directory
.Sp
The author's BackCPAN directory.
.IP "\(bu" 4
cpantesters_reports
.Sp
The author's \s-1CPAN\s0 Testers Reports page.
.IP "\(bu" 4
cpantesters_matrix
.Sp
The author's \s-1CPAN\s0 Testers matrix page.
.IP "\(bu" 4
cpants
.Sp
The author's \s-1CPANTS\s0 page.
.IP "\(bu" 4
metacpan_explorer
.Sp
A link to the MetaCPAN explorer site pre-populated with a request for the
author's profile.
.SS "blog"
.IX Subsection "blog"
This is an arrayref containing zer or more hashrefs. Each hashref contains two
keys, \f(CW\*(C`url\*(C'\fR and \f(CW\*(C`feed\*(C'\fR. For example:
.PP
.Vb 4
\&    {
\&        url  => "http://blogs.perl.org/users/brian_d_foy/",
\&        feed => "http://blogs.perl.org/users/brian_d_foy/atom.xml",
\&    }
.Ve
.SS "release_count"
.IX Subsection "release_count"
This is a hashref containing counts for various types of releases. The known
keys are:
.IP "\(bu" 4
cpan
.Sp
The total number of distribution uplaods the author currently has on \s-1CPAN.\s0
.IP "\(bu" 4
latest
.Sp
The total number of unique distributions the author currently has on \s-1CPAN.\s0
.IP "\(bu" 4
backpan-only
.Sp
The number of distribution uploads currently only available via BackPAN.
.SS "extra"
.IX Subsection "extra"
Returns a hashref. The contents of this are entirely arbitrary and will vary
by author.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1BUILDARGS\s0"
.IX Subsection "BUILDARGS"
Ensures format of the input.
.SS "releases"
.IX Subsection "releases"
.Vb 1
\&    my $releases = $author\->releases();
.Ve
.PP
This method returns a MetaCPAN::Client::ResultSet of
MetaCPAN::Client::Release objects. It includes all of the author's releases
with the \f(CW\*(C`latest\*(C'\fR status.
.SS "metacpan_url"
.IX Subsection "metacpan_url"
Returns a link to the author's page on MetaCPAN.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Sawyer X <xsawyerx@cpan.org>
.IP "\(bu" 4
Mickey Nasriachi <mickey@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Sawyer X.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
