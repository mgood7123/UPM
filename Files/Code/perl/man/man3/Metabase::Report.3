.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Metabase::Report 3"
.TH Metabase::Report 3 "2016-02-29" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Metabase::Report \- a base class for collections of Metabase facts
.SH "VERSION"
.IX Header "VERSION"
version 0.025
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyReport;
\&
\&  use Metabase::Report;
\&  our @ISA = qw/Metabase::Report/;
\&  _\|_PACKAGE_\|_\->load_fact_classes;
\&
\&  sub report_spec {
\&    return {
\&      \*(AqFact::One\*(Aq => 1,     # one of Fact::One
\&      \*(AqFact::Two\*(Aq => "0+",  # zero or more of Fact::Two
\&    }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Metabase is a system for associating metadata with \s-1CPAN\s0
distributions.  The metabase can be used to store test reports, reviews,
coverage analysis reports, reports on static analysis of coding style, or
anything else for which datatypes are constructed.
.PP
Metabase::Report is a base class for collections of Metabase::Fact objects that
can be sent to or retrieved from a Metabase system.
.PP
Metabase::Report is itself a subclass of Metabase::Fact and offers the same
\&\s-1API,\s0 except as described below.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
A subclass of Metabase::Report only requires one method, \f(CW"report_spec"\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
\fIcontent\fR
.IX Subsection "content"
.PP
The \f(CW\*(C`content\*(C'\fR attribute of a Report must be a reference to an array of
Metabase::Fact subclass objects.
.SH "METHODS"
.IX Header "METHODS"
In addition to the standard \f(CW\*(C`new\*(C'\fR constructor, the following \f(CW\*(C`open\*(C'\fR, \f(CW\*(C`add\*(C'\fR
and \f(CW\*(C`close\*(C'\fR methods may be used to construct a report piecemeal, instead.
.SS "open"
.IX Subsection "open"
.Vb 3
\&  $report = Report::Subclass\->open(
\&    id => \*(AqAUTHORID/Foo\-Bar\-1.23.tar.gz\*(Aq,
\&  );
.Ve
.PP
Constructs a new, empty report. The 'id' attribute is required.  The
\&'refers_to' attribute is optional.  The 'content' attribute may be provided,
but see \f(CW\*(C`add\*(C'\fR below. No other attributes may be provided to \f(CW\*(C`new\*(C'\fR.
.SS "add"
.IX Subsection "add"
.Vb 1
\&  $report\->add( \*(AqFact::Subclass\*(Aq => $content );
.Ve
.PP
Using the 'id' attribute of the report, this method constructs a new Fact from
a class and a content argument.  The resulting Fact is appended to the Report's
content array.
.SS "close"
.IX Subsection "close"
.Vb 1
\&  $report\->close;
.Ve
.PP
This method validates the report based on all Facts added so far.
.SS "facts"
.IX Subsection "facts"
This method returns a list of all the facts in the report.  In scalar context,
it returns the number of facts in the report.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "fact_classes"
.IX Subsection "fact_classes"
.SS "load_fact_classes"
.IX Subsection "load_fact_classes"
Loads each class listed in the report spec.
.SH "ABSTRACT METHODS"
.IX Header "ABSTRACT METHODS"
Methods marked as 'required' must be implemented by a report subclass.  (The
version in Metabase::Report will die with an error if called.)
.PP
In the documentation below, the terms 'must, 'must not', 'should', etc. have
their usual \s-1RFC 2119\s0 meanings.
.PP
Methods \s-1MUST\s0 throw an exception if an error occurs.
.SS "report_spec"
.IX Subsection "report_spec"
\&\fBrequired\fR
.PP
.Vb 1
\&  $spec = Report::Subclass\->report_spec;
.Ve
.PP
The \f(CW\*(C`report_spec\*(C'\fR method \s-1MUST\s0 return a hash reference that defines how
many Facts of which types must be in the report for it to be considered valid.
Keys \s-1MUST\s0 be class names.  Values \s-1MUST\s0 be non-negative integers that indicate
the number of Facts of that type that must be present for a report to be
valid, optionally followed by a '+' character to indicate that the report
may contain more than the given number.
.PP
For example:
.PP
.Vb 4
\&  {
\&    Fact::One => 1,     # one of Fact::One
\&    Fact::Two => "0+",  # zero or more of Fact::Two
\&  }
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature using the \s-1CPAN\s0 Request Tracker.  Bugs can be
submitted through the web interface at
<http://rt.cpan.org/Dist/Display.html?Queue=Metabase\-Fact>
.PP
When submitting a bug or request, please include a test-file or a patch to an
existing test-file that illustrates the bug or desired feature.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.IP "\(bu" 4
H.Merijn Brand <hmbrand@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
