.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Mail::Send 3"
.TH Mail::Send 3 "2017-08-22" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Send \- Simple electronic mail interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  require Mail::Send;
\&
\&  $msg = Mail::Send\->new;
\&  $msg = Mail::Send\->new(Subject => \*(Aqexample\*(Aq, To => \*(Aqtimbo\*(Aq);
\&
\&  $msg\->to(\*(Aquser@host\*(Aq);
\&  $msg\->to(\*(Aquser@host\*(Aq, \*(Aquser2@example.com\*(Aq);
\&  $msg\->subject(\*(Aqexample subject\*(Aq);
\&  $msg\->cc(\*(Aquser@host\*(Aq);
\&  $msg\->bcc(\*(Aqsomeone@else\*(Aq);
\&
\&  $msg\->set($header, @values);
\&  $msg\->add($header, @values);
\&  $msg\->delete($header);
\&
\&  # Launch mailer and set headers. The filehandle returned
\&  # by open() is an instance of the Mail::Mailer class.
\&  # Arguments to the open() method are passed to the Mail::Mailer
\&  # constructor.
\&
\&  $fh = $msg\->open;   # some default mailer
\&  $fh = $msg\->open(\*(Aqsendmail\*(Aq); # explicit
\&  print $fh "Body of message";
\&  $fh\->close          # complete the message and send it
\&      or die "couldn\*(Aqt send whole message: $!\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mail::Send creates e\-mail messages without using the Mail::Header
knowledge, which means that all escaping and folding must be done by
you!  Simplicity has its price.
.PP
When you have time, take a look at Mail::Transport
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "Mail::Send\->\fBnew\fR(\s-1PAIRS\s0)" 4
.IX Item "Mail::Send->new(PAIRS)"
A list of header fields (provided as key-value \s-1PAIRS\s0) can be
used to initialize the object.
.SS "Header fields"
.IX Subsection "Header fields"
.ie n .IP "$obj\->\fBadd\fR(\s-1FIELDNAME, VALUES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1FIELDNAME, VALUES\s0)" 4
.IX Item "$obj->add(FIELDNAME, VALUES)"
Add values to the list of defined values for the \s-1FIELDNAME.\s0
.ie n .IP "$obj\->\fBbcc\fR(\s-1VALUES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBbcc\fR(\s-1VALUES\s0)" 4
.IX Item "$obj->bcc(VALUES)"
.PD 0
.ie n .IP "$obj\->\fBcc\fR(\s-1VALUES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcc\fR(\s-1VALUES\s0)" 4
.IX Item "$obj->cc(VALUES)"
.ie n .IP "$obj\->\fBdelete\fR(\s-1FIELDNAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(\s-1FIELDNAME\s0)" 4
.IX Item "$obj->delete(FIELDNAME)"
.ie n .IP "$obj\->\fBset\fR(\s-1FIELDNAME, VALUES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR(\s-1FIELDNAME, VALUES\s0)" 4
.IX Item "$obj->set(FIELDNAME, VALUES)"
.PD
\&\s-1VALUES\s0 will replace the old values for the \s-1FIELDNAME.\s0  Returned is
the \s-1LIST\s0 of values after modification.
.ie n .IP "$obj\->\fBsubject\fR(\s-1VALUES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBsubject\fR(\s-1VALUES\s0)" 4
.IX Item "$obj->subject(VALUES)"
.PD 0
.ie n .IP "$obj\->\fBto\fR(\s-1VALUES\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBto\fR(\s-1VALUES\s0)" 4
.IX Item "$obj->to(VALUES)"
.PD
.SS "Sending"
.IX Subsection "Sending"
.ie n .IP "$obj\->\fBopen\fR(\s-1OPTIONS\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR(\s-1OPTIONS\s0)" 4
.IX Item "$obj->open(OPTIONS)"
The \s-1OPTIONS\s0 are used to initiate a mailer object via
\&\fIMail::Mailer::new()\fR.  Then \fIMail::Mailer::open()\fR is called
with the knowledge collected in this Mail::Send object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of the MailTools distribution,
\&\fIhttp://perl.overmeer.net/mailtools/\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
The MailTools bundle was developed by Graham Barr.  Later, Mark
Overmeer took over maintenance without commitment to further development.
.PP
Mail::Cap by Gisle Aas <aas@oslonett.no>.
Mail::Field::AddrList by Peter Orbaek <poe@cit.dk>.
Mail::Mailer and Mail::Send by Tim Bunce <Tim.Bunce@ig.co.uk>.
For other contributors see ChangeLog.
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1995\-2000 Graham Barr <gbarr@pobox.com> and
2001\-2017 Mark Overmeer <perl@overmeer.net>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
