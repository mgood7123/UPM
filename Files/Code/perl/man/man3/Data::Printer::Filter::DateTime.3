.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Data::Printer::Filter::DateTime 3"
.TH Data::Printer::Filter::DateTime 3 "2015-05-29" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Printer::Filter::DateTime \- pretty\-printing date and time objects (not just DateTime!)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your program:
.PP
.Vb 3
\&  use Data::Printer filters => {
\&    \-external => [ \*(AqDateTime\*(Aq ],
\&  };
.Ve
.PP
or, in your \f(CW\*(C`.dataprinter\*(C'\fR file:
.PP
.Vb 5
\&  {
\&    filters => {
\&       \-external => [ \*(AqDateTime\*(Aq ],
\&    },
\&  };
.Ve
.PP
You can also setup color and display details:
.PP
.Vb 12
\&  use Data::Printer
\&      filters => {
\&          \-external => [ \*(AqDateTime\*(Aq ],
\&      },
\&      color   => {
\&          datetime => \*(Aqbright_green\*(Aq,
\&      }
\&      datetime => {
\&          show_class_name => 1,  # default is 0
\&          show_timezone   => 0,  # default is 1 (only works for DateTime objects)
\&      },
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a filter plugin for Data::Printer. It filters through
several date and time manipulation classes and displays the time
(or time duration) as a string.
.SS "Parsed Modules"
.IX Subsection "Parsed Modules"
.IP "\(bu" 4
DateTime
.IP "\(bu" 4
DateTime::Duration
.IP "\(bu" 4
DateTime::Incomplete
.IP "\(bu" 4
Class::Date
.IP "\(bu" 4
Time::Piece
.IP "\(bu" 4
Date::Handler
.IP "\(bu" 4
Date::Handler::Delta
.IP "\(bu" 4
Date::Calc::Object
.IP "\(bu" 4
Date::Pcalc::Object
.PP
If you have any suggestions for more modules or better output,
please let us know.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::Printer
