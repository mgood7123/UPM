.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Net::DNS::Update 3"
.TH Net::DNS::Update 3 "2017-08-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Update \- DNS dynamic update packet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DNS;
\&
\&    $update = new Net::DNS::Update( \*(Aqexample.com\*(Aq, \*(AqIN\*(Aq );
\&
\&    $update\->push( prereq => nxrrset(\*(Aqfoo.example.com. A\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com. 86400 A 192.168.1.2\*(Aq) );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::DNS::Update is a subclass of Net::DNS::Packet, to be used for
making \s-1DNS\s0 dynamic updates.
.PP
Programmers should refer to \s-1RFC2136\s0 for dynamic update semantics.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\&    $update = new Net::DNS::Update;
\&    $update = new Net::DNS::Update( \*(Aqexample.com\*(Aq );
\&    $update = new Net::DNS::Update( \*(Aqexample.com\*(Aq, \*(AqHS\*(Aq );
.Ve
.PP
Returns a Net::DNS::Update object suitable for performing a \s-1DNS\s0
dynamic update.	 Specifically, it creates a packet with the header
opcode set to \s-1UPDATE\s0 and the zone record type to \s-1SOA\s0 (per \s-1RFC 2136,\s0
Section 2.3).
.PP
Programs must use the \fIpush()\fR method to add RRs to the prerequisite,
update, and additional sections before performing the update.
.PP
Arguments are the zone name and the class.  The zone and class may
be undefined or omitted and default to the default domain from the
resolver configuration and \s-1IN\s0 respectively.
.SS "push"
.IX Subsection "push"
.Vb 3
\&    $ancount = $update\->push( prereq => $rr );
\&    $nscount = $update\->push( update => $rr );
\&    $arcount = $update\->push( additional => $rr );
\&
\&    $nscount = $update\->push( update => $rr1, $rr2, $rr3 );
\&    $nscount = $update\->push( update => @rr );
.Ve
.PP
Adds RRs to the specified section of the update packet.
.PP
Returns the number of resource records in the specified section.
.PP
Section names may be abbreviated to the first three characters.
.SS "unique_push"
.IX Subsection "unique_push"
.Vb 3
\&    $ancount = $update\->unique_push( prereq => $rr );
\&    $nscount = $update\->unique_push( update => $rr );
\&    $arcount = $update\->unique_push( additional => $rr );
\&
\&    $nscount = $update\->unique_push( update => $rr1, $rr2, $rr3 );
\&    $nscount = $update\->unique_push( update => @rr );
.Ve
.PP
Adds RRs to the specified section of the update packet provided
that the RRs are not already present in the same section.
.PP
Returns the number of resource records in the specified section.
.PP
Section names may be abbreviated to the first three characters.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The first example below shows a complete program.
Subsequent examples show only the creation of the update packet.
.PP
Although the examples are presented using the string form of RRs,
the corresponding ( name => value ) form may also be used.
.SS "Add a new host"
.IX Subsection "Add a new host"
.Vb 1
\&    #!/usr/bin/perl
\&
\&    use Net::DNS;
\&
\&    # Create the update packet.
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&
\&    # Prerequisite is that no A records exist for the name.
\&    $update\->push( pre => nxrrset(\*(Aqfoo.example.com. A\*(Aq) );
\&
\&    # Add two A records for the name.
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com. 86400 A 192.168.1.2\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com. 86400 A 172.16.3.4\*(Aq) );
\&
\&    # Send the update to the zone\*(Aqs primary master.
\&    my $resolver = new Net::DNS::Resolver;
\&    $resolver\->nameservers(\*(Aqprimary\-master.example.com\*(Aq);
\&
\&    my $reply = $resolver\->send($update);
\&
\&    # Did it work?
\&    if ($reply) {
\&            if ( $reply\->header\->rcode eq \*(AqNOERROR\*(Aq ) {
\&                    print "Update succeeded\en";
\&            } else {
\&                    print \*(AqUpdate failed: \*(Aq, $reply\->header\->rcode, "\en";
\&            }
\&    } else {
\&            print \*(AqUpdate failed: \*(Aq, $resolver\->errorstring, "\en";
\&    }
.Ve
.SS "Add an \s-1MX\s0 record for a name that already exists"
.IX Subsection "Add an MX record for a name that already exists"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => yxdomain(\*(Aqexample.com\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqexample.com MX 10 mailhost.example.com\*(Aq) );
.Ve
.SS "Add a \s-1TXT\s0 record for a name that does not exist"
.IX Subsection "Add a TXT record for a name that does not exist"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => nxdomain(\*(Aqinfo.example.com\*(Aq) );
\&    $update\->push( update => rr_add(\*(Aqinfo.example.com TXT "yabba dabba doo"\*(Aq) );
.Ve
.SS "Delete all A records for a name"
.IX Subsection "Delete all A records for a name"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => yxrrset(\*(Aqfoo.example.com A\*(Aq) );
\&    $update\->push( update => rr_del(\*(Aqfoo.example.com A\*(Aq) );
.Ve
.SS "Delete all RRs for a name"
.IX Subsection "Delete all RRs for a name"
.Vb 3
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( prereq => yxdomain(\*(Aqbyebye.example.com\*(Aq) );
\&    $update\->push( update => rr_del(\*(Aqbyebye.example.com\*(Aq) );
.Ve
.SS "Perform a \s-1DNS\s0 update signed using a \s-1BIND\s0 private key file"
.IX Subsection "Perform a DNS update signed using a BIND private key file"
.Vb 5
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( update => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq) );
\&    $update\->sign_tsig( "$dir/Khmac\-sha512.example.com.+165+01018.private" );
\&    my $reply = $resolver\->send( $update );
\&    $reply\->verify( $update ) || die $reply\->verifyerr;
.Ve
.SS "Signing the \s-1DNS\s0 update using a \s-1BIND\s0 public key file"
.IX Subsection "Signing the DNS update using a BIND public key file"
.Vb 1
\&    $update\->sign_tsig( "$dir/Khmac\-sha512.example.com.+165+01018.key" );
.Ve
.SS "Signing the \s-1DNS\s0 update using a customised \s-1TSIG\s0 record"
.IX Subsection "Signing the DNS update using a customised TSIG record"
.Vb 3
\&    $update\->sign_tsig( "$dir/Khmac\-sha512.example.com.+165+01018.private",
\&                        fudge => 60
\&                        );
.Ve
.SS "Another way to sign a \s-1DNS\s0 update"
.IX Subsection "Another way to sign a DNS update"
.Vb 2
\&    my $key_name = \*(Aqtsig\-key\*(Aq;
\&    my $key      = \*(AqawwLOtRfpGE+rRKF2+DEiw==\*(Aq;
\&
\&    my $tsig = new Net::DNS::RR("$key_name TSIG $key");
\&    $tsig\->fudge(60);
\&
\&    my $update = new Net::DNS::Update(\*(Aqexample.com\*(Aq);
\&    $update\->push( update     => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq) );
\&    $update\->push( additional => $tsig );
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)1997\-2000 Michael Fuhr.
.PP
Portions Copyright (c)2002,2003 Chris Reinhardt.
.PP
Portions Copyright (c)2015 Dick Franks.
.PP
All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided
that the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation, and that the name of the author not be used in advertising
or publicity pertaining to distribution of the software without specific
prior written permission.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::Packet, Net::DNS::Header,
Net::DNS::RR, Net::DNS::Resolver, \s-1RFC 2136, RFC 2845\s0
