.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Log::Dispatch::Screen 3"
.TH Log::Dispatch::Screen 3 "2017-09-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Dispatch::Screen \- Object for logging to the screen
.SH "VERSION"
.IX Header "VERSION"
version 2.67
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Log::Dispatch;
\&
\&  my $log = Log::Dispatch\->new(
\&      outputs => [
\&          [
\&              \*(AqScreen\*(Aq,
\&              min_level => \*(Aqdebug\*(Aq,
\&              stderr    => 1,
\&              newline   => 1
\&          ]
\&      ],
\&  );
\&
\&  $log\->alert("I\*(Aqm searching the city for sci\-fi wasabi");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an object for logging to the screen (really
\&\f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR).
.PP
Note that a newline will \fInot\fR be added automatically at the end of a
message by default. To do that, pass \f(CW\*(C`newline => 1\*(C'\fR.
.PP
The handle will be autoflushed, but this module opens it's own handle to fd 1
or 2 instead of using the global \f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The constructor takes the following parameters in addition to the standard
parameters documented in Log::Dispatch::Output:
.IP "\(bu" 4
stderr (0 or 1)
.Sp
Indicates whether or not logging information should go to \f(CW\*(C`STDERR\*(C'\fR. If
false, logging information is printed to \f(CW\*(C`STDOUT\*(C'\fR instead.
.Sp
This defaults to true.
.IP "\(bu" 4
utf8 (0 or 1)
.Sp
If this is true, then the output uses \f(CW\*(C`binmode\*(C'\fR to apply the
\&\f(CW\*(C`:encoding(UTF\-8)\*(C'\fR layer to the relevant handle for output. This will not
affect \f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR in other parts of your code.
.Sp
This defaults to false.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Log\-Dispatch/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Log-Dispatch can be found at <https://github.com/houseabsolute/Log\-Dispatch>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
