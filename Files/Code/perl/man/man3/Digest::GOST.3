.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Digest::GOST 3"
.TH Digest::GOST 3 "2012-10-03" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Digest::GOST \- Perl interface to the GOST R 34.11\-94 digest algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Functional interface
\&    use Digest::GOST qw(gost gost_hex gost_base64);
\&
\&    $digest = gost($data);
\&    $digest = gost_hex($data);
\&    $digest = gost_base64($data);
\&
\&    # Object\-oriented interface
\&    use Digest::GOST;
\&
\&    $ctx = Digest::GOST\->new(256);
\&
\&    $ctx\->add($data);
\&    $ctx\->addfile(*FILE);
\&
\&    $digest = $ctx\->digest;
\&    $digest = $ctx\->hexdigest;
\&    $digest = $ctx\->b64digest;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Digest::GOST\*(C'\fR module provides an interface to the \s-1GOST R 34.11\-94\s0
message digest algorithm.
.PP
This interface follows the conventions set forth by the \f(CW\*(C`Digest\*(C'\fR module.
.PP
This module uses the default \*(L"test\*(R" parameters. To use the CryptoPro
parameters, use \f(CW\*(C`Digest::GOST::CryptoPro\*(C'\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The following functions are provided by the \f(CW\*(C`Digest::GOST\*(C'\fR module. None of
these functions are exported by default.
.SS "gost($data, ...)"
.IX Subsection "gost($data, ...)"
Logically joins the arguments into a single string, and returns its \s-1GOST\s0
digest encoded as a binary string.
.SS "gost_hex($data, ...)"
.IX Subsection "gost_hex($data, ...)"
Logically joins the arguments into a single string, and returns its \s-1GOST\s0
digest encoded as a hexadecimal string.
.SS "gost_base64($data, ...)"
.IX Subsection "gost_base64($data, ...)"
Logically joins the arguments into a single string, and returns its \s-1GOST\s0
digest encoded as a Base64 string, without any trailing padding.
.SH "METHODS"
.IX Header "METHODS"
The object-oriented interface to \f(CW\*(C`Digest::GOST\*(C'\fR is identical to that
described by \f(CW\*(C`Digest\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Digest::GOST::CryptoPro
.PP
Digest
.PP
Task::Digest
.PP
<http://en.wikipedia.org/wiki/GOST_(hash_function)>
.SH "REQUESTS AND BUGS"
.IX Header "REQUESTS AND BUGS"
Please report any bugs or feature requests to
<http://rt.cpan.org/Public/Bug/Report.html?Digest\-GOST>. I will be
notified, and then you'll automatically be notified of progress on your bug
as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Digest::GOST
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
GitHub Source Repository
.Sp
<http://github.com/gray/digest\-gost>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Digest\-GOST>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Digest\-GOST>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/Public/Dist/Display.html?Name=Digest\-GOST>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Digest\-GOST/>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010\-2012 gray <gray at cpan.org>, all rights reserved.
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
gray, <gray at cpan.org>
