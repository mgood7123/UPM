.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Log::Dispatch::File 3"
.TH Log::Dispatch::File 3 "2017-09-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Dispatch::File \- Object for logging to files
.SH "VERSION"
.IX Header "VERSION"
version 2.67
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Log::Dispatch;
\&
\&  my $log = Log::Dispatch\->new(
\&      outputs => [
\&          [
\&              \*(AqFile\*(Aq,
\&              min_level => \*(Aqinfo\*(Aq,
\&              filename  => \*(AqSomefile.log\*(Aq,
\&              mode      => \*(Aq>>\*(Aq,
\&              newline   => 1
\&          ]
\&      ],
\&  );
\&
\&  $log\->emerg("I\*(Aqve fallen and I can\*(Aqt get up");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a simple object for logging to files under the
Log::Dispatch::* system.
.PP
Note that a newline will \fInot\fR be added automatically at the end of a message
by default. To do that, pass \f(CW\*(C`newline => 1\*(C'\fR.
.PP
\&\fB\s-1NOTE:\s0\fR If you are writing to a single log file from multiple processes, the
log output may become interleaved and garbled. Use the
Log::Dispatch::File::Locked output instead, which allows multiple processes
to safely share a single file.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The constructor takes the following parameters in addition to the standard
parameters documented in Log::Dispatch::Output:
.IP "\(bu" 4
filename ($)
.Sp
The filename to be opened for writing.
.IP "\(bu" 4
mode ($)
.Sp
The mode the file should be opened with. Valid options are 'write',
\&'>', 'append', '>>', or the relevant constants from Fcntl. The
default is 'write'.
.IP "\(bu" 4
binmode ($)
.Sp
A layer name to be passed to binmode, like \*(L":encoding(\s-1UTF\-8\s0)\*(R" or \*(L":raw\*(R".
.IP "\(bu" 4
close_after_write ($)
.Sp
Whether or not the file should be closed after each write. This
defaults to false.
.Sp
If this is true, then the mode will always be append, so that the file is not
re-written for each new message.
.IP "\(bu" 4
lazy_open ($)
.Sp
Whether or not the file should be opened only on first write. This defaults to
false.
.IP "\(bu" 4
autoflush ($)
.Sp
Whether or not the file should be autoflushed. This defaults to true.
.IP "\(bu" 4
syswrite ($)
.Sp
Whether or not to perform the write using \*(L"syswrite\*(R" in perlfunc(),
as opposed to \*(L"print\*(R" in perlfunc(). This defaults to false.
The usual caveats and warnings as documented in \*(L"syswrite\*(R" in perlfunc apply.
.IP "\(bu" 4
permissions ($)
.Sp
If the file does not already exist, the permissions that it should
be created with. Optional. The argument passed must be a valid
octal value, such as 0600 or the constants available from Fcntl, like
S_IRUSR|S_IWUSR.
.Sp
See \*(L"chmod\*(R" in perlfunc for more on potential traps when passing octal
values around. Most importantly, remember that if you pass a string
that looks like an octal value, like this:
.Sp
.Vb 1
\& my $mode = \*(Aq0644\*(Aq;
.Ve
.Sp
Then the resulting file will end up with permissions like this:
.Sp
.Vb 1
\& \-\-w\-\-\-\-r\-T
.Ve
.Sp
which is probably not what you want.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Log\-Dispatch/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Log-Dispatch can be found at <https://github.com/houseabsolute/Log\-Dispatch>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fI\s-1LICENSE\s0\fR file included with this distribution.
