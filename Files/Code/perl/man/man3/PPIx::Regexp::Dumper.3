.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Dumper 3"
.TH PPIx::Regexp::Dumper 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Dumper \- Dump the results of parsing regular expressions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use PPIx::Regexp::Dumper;
\& PPIx::Regexp::Dumper\->new( \*(Aqqr{foo}smx\*(Aq )
\&     \->print();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Dumper\*(C'\fR is a
PPIx::Regexp::Support.
.PP
\&\f(CW\*(C`PPIx::Regexp::Dumper\*(C'\fR has no descendants.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class generates a formatted dump of a
PPIx::Regexp::Element object (or any subclass
thereof), a PPIx::Regexp::Tokenizer
object, or a string that can be made into one of these.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following public methods. Methods not documented
here are private, and unsupported in the sense that the author reserves
the right to change or remove them without notice.
.SS "new"
.IX Subsection "new"
.Vb 3
\& my $dumper = PPIx::Regexp::Dumper\->new(
\&     \*(Aq/foo/\*(Aq, ordinal => 1,
\& );
.Ve
.PP
This static method instantiates the dumper. It takes the string,
PPI::Element,
PPIx::Regexp::Element, or
PPIx::Regexp::Tokenizer to be dumped as the
first argument.  Optional further arguments may be passed as name/value
pairs.
.PP
The following options are recognized:
.IP "default_modifiers array_reference" 4
.IX Item "default_modifiers array_reference"
This argument is a reference to a list of default modifiers to be
applied to the statement being parsed. See PPIx::Regexp
\&\fInew()\fR for the details.
.IP "encoding name" 4
.IX Item "encoding name"
This argument is the name of the encoding of the regular expression. If
specified, it is passed through to
PPIx::Regexp\->\fInew()\fR. It also causes an
\&\f(CW\*(C`Encode::encode\*(C'\fR to be done on any parse content dumped.
.IP "explain boolean" 4
.IX Item "explain boolean"
If true, this option causes the \f(CW\*(C`explain()\*(C'\fR output of each object to be
dumped.
.IP "indent number" 4
.IX Item "indent number"
This argument is the number of additional spaces to indent each level of
the parse hierarchy. This is ignored if either the \f(CW\*(C`test\*(C'\fR or \f(CW\*(C`tokens\*(C'\fR
argument is true.
.Sp
The default is 2.
.IP "margin number" 4
.IX Item "margin number"
This is the number of spaces to indent the top level of the parse
hierarchy. This is ignored if the \f(CW\*(C`test\*(C'\fR argument is true.
.Sp
The default is zero.
.IP "ordinal boolean" 4
.IX Item "ordinal boolean"
If true, this option causes the \f(CW\*(C`ordinal\*(C'\fR values of
PPIx::Regexp::Token::Literal objects to
be dumped.
.IP "perl_version boolean" 4
.IX Item "perl_version boolean"
If true, this option causes the \f(CW\*(C`perl_version_introduced\*(C'\fR and
\&\f(CW\*(C`perl_version_removed\*(C'\fR values associated with each object dumped to be
displayed.
.IP "postderef boolean" 4
.IX Item "postderef boolean"
If true, postfix dereferences are recognized in code and interpolations.
See the tokenizer's \fInew()\fR for details.
.IP "strict boolean" 4
.IX Item "strict boolean"
This option is passed on to the parser, where it specifies whether the
parse should assume \f(CW\*(C`use re \*(Aqstrict\*(Aq\*(C'\fR is in effect.
.Sp
The \f(CW\*(Aqstrict\*(Aq\fR pragma was introduced in Perl 5.22, and its
documentation says that it is experimental, and that there is no
commitment to backward compatibility. The same applies to the
parse produced when this option is asserted.
.Sp
The default is false.
.IP "significant boolean" 4
.IX Item "significant boolean"
If true, this option causes only significant elements to be dumped.
.Sp
The default is false.
.IP "test boolean" 4
.IX Item "test boolean"
If true, this option causes the output to be formatted as a regression
test rather than as a straight dump. The output produced by asserting
this option is explicitly undocumented, in the sense that the author
reserves the right to change the generated output without notice of any
kind.
.Sp
The default is false.
.IP "tokens boolean" 4
.IX Item "tokens boolean"
If true, this option causes a dump of tokenizer output rather than of a
full parse of the regular expression. This is forced true if the dump is
of a PPIx::Regexp::Tokenizer.
.Sp
The default is false.
.IP "trace number" 4
.IX Item "trace number"
If greater than zero, this option causes a trace of the parse. This
option is unsupported in the sense that the author reserves the right to
change it without notice.
.Sp
The default is zero.
.IP "verbose number" 4
.IX Item "verbose number"
If greater than zero, this option causes additional information to be
given about the elements found. This option is unsupported in the sense
that the author reserves the right to change it without notice.
.Sp
The default is zero.
.PP
If the thing to be dumped was a string, unrecognized arguments are
passed to \f(CW\*(C`PPIx::Regexp::Tokenizer\->new()\*(C'\fR. Otherwise they are
ignored.
.SS "list"
.IX Subsection "list"
.Vb 1
\& print map { "$_\en" } $dumper\->list();
.Ve
.PP
This method produces an array containing the dump output, one line per
element. The output has no left margin applied, and no newlines.
.SS "print"
.IX Subsection "print"
.Vb 1
\& $dumper\->print();
.Ve
.PP
This method simply prints the result of \*(L"string\*(R" to standard out.
.SS "string"
.IX Subsection "string"
.Vb 1
\& print $dumper\->string();
.Ve
.PP
This method adds left margin and newlines to the output of \*(L"list\*(R",
concatenates the result into a single string, and returns that string.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III\s0 \fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
