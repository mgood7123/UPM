.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Async::Protocol::Stream 3"
.TH IO::Async::Protocol::Stream 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"IO::Async::Protocol::Stream" \- base class for stream\-based protocols
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Most likely this class will be subclassed to implement a particular network
protocol.
.PP
.Vb 1
\& package Net::Async::HelloWorld;
\&
\& use strict;
\& use warnings;
\& use base qw( IO::Async::Protocol::Stream );
\&
\& sub on_read
\& {
\&    my $self = shift;
\&    my ( $buffref, $eof ) = @_;
\&
\&    return 0 unless $$buffref =~ s/^(.*)\en//;
\&    my $line = $1;
\&
\&    if( $line =~ m/^HELLO (.*)/ ) {
\&       my $name = $1;
\&
\&       $self\->invoke_event( on_hello => $name );
\&    }
\&
\&    return 1;
\& }
\&
\& sub send_hello
\& {
\&    my $self = shift;
\&    my ( $name ) = @_;
\&
\&    $self\->write( "HELLO $name\en" );
\& }
.Ve
.PP
This small example elides such details as error handling, which a real
protocol implementation would be likely to contain.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This subclass of IO::Async::Protocol is intended to stand as a base class
for implementing stream-based protocols. It provides an interface similar to
IO::Async::Stream, primarily, a \f(CW\*(C`write\*(C'\fR method and an \f(CW\*(C`on_read\*(C'\fR event
handler.
.PP
It contains an instance of an IO::Async::Stream object which it uses for
actual communication, rather than being a subclass of it, allowing a level of
independence from the actual stream being used. For example, the stream may
actually be an IO::Async::SSLStream to allow the protocol to be used over
\&\s-1SSL.\s0
.PP
As with IO::Async::Stream, it is required that by the time the protocol
object is added to a Loop, that it either has an \f(CW\*(C`on_read\*(C'\fR method, or has
been configured with an \f(CW\*(C`on_read\*(C'\fR callback handler.
.SH "EVENTS"
.IX Header "EVENTS"
The following events are invoked, either using subclass methods or \s-1CODE\s0
references in parameters:
.ie n .SS "$ret = on_read \e$buffer, $eof"
.el .SS "\f(CW$ret\fP = on_read \e$buffer, \f(CW$eof\fP"
.IX Subsection "$ret = on_read $buffer, $eof"
.SS "on_read_eof"
.IX Subsection "on_read_eof"
.SS "on_write_eof"
.IX Subsection "on_write_eof"
The event handlers are invoked identically to IO::Async::Stream.
.SS "on_closed"
.IX Subsection "on_closed"
The \f(CW\*(C`on_closed\*(C'\fR handler is optional, but if provided, will be invoked after
the stream is closed by either side (either because the \f(CW\*(C`close()\*(C'\fR method has
been invoked on it, or on an incoming \s-1EOF\s0).
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The following named parameters may be passed to \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`configure\*(C'\fR:
.SS "on_read => \s-1CODE\s0"
.IX Subsection "on_read => CODE"
.SS "on_read_eof => \s-1CODE\s0"
.IX Subsection "on_read_eof => CODE"
.SS "on_write_eof => \s-1CODE\s0"
.IX Subsection "on_write_eof => CODE"
\&\s-1CODE\s0 references for the events.
.SS "handle => \s-1IO\s0"
.IX Subsection "handle => IO"
A shortcut for the common case where the transport only needs to be a plain
IO::Async::Stream object. If this argument is provided without a
\&\f(CW\*(C`transport\*(C'\fR object, a new IO::Async::Stream object will be built around
the given \s-1IO\s0 handle, and used as the transport.
.SH "METHODS"
.IX Header "METHODS"
.SS "write"
.IX Subsection "write"
.Vb 1
\&   $protocol\->write( $data )
.Ve
.PP
Writes the given data by calling the \f(CW\*(C`write\*(C'\fR method on the contained
transport stream.
.SS "connect"
.IX Subsection "connect"
.Vb 1
\&   $protocol\->connect( %args )
.Ve
.PP
Sets up a connection to a peer, and configures the underlying \f(CW\*(C`transport\*(C'\fR for
the Protocol. Calls IO::Async::Protocol \f(CW\*(C`connect\*(C'\fR with \f(CW\*(C`socktype\*(C'\fR set to
\&\f(CW"stream"\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
