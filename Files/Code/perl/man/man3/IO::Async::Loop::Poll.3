.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Async::Loop::Poll 3"
.TH IO::Async::Loop::Poll 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"IO::Async::Loop::Poll" \- use "IO::Async" with "poll(2)"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Normally an instance of this class would not be directly constructed by a
program. It may however, be useful for runinng IO::Async with an existing
program already using an \f(CW\*(C`IO::Poll\*(C'\fR object.
.PP
.Vb 2
\& use IO::Poll;
\& use IO::Async::Loop::Poll;
\&
\& my $poll = IO::Poll\->new;
\& my $loop = IO::Async::Loop::Poll\->new( poll => $poll );
\&
\& $loop\->add( ... );
\&
\& while(1) {
\&    my $timeout = ...
\&    my $ret = $poll\->poll( $timeout );
\&    $loop\->post_poll;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This subclass of IO::Async::Loop uses the \f(CWpoll(2)\fR system call to perform
read-ready and write-ready tests.
.PP
By default, this loop will use the underlying \f(CW\*(C`poll()\*(C'\fR system call directly,
bypassing the usual IO::Poll object wrapper around it because of a number
of bugs and design flaws in that class; namely
.IP "\(bu" 2
<https://rt.cpan.org/Ticket/Display.html?id=93107> \- IO::Poll relies on
stable stringification of \s-1IO\s0 handles
.IP "\(bu" 2
<https://rt.cpan.org/Ticket/Display.html?id=25049> \- IO::Poll\->\fIpoll()\fR with no
handles always returns immediately
.PP
However, to integrate with existing code that uses an \f(CW\*(C`IO::Poll\*(C'\fR object, a
\&\f(CW\*(C`post_poll\*(C'\fR can be called immediately after the \f(CW\*(C`poll\*(C'\fR method that
\&\f(CW\*(C`IO::Poll\*(C'\fR object. The appropriate mask bits are maintained on the
\&\f(CW\*(C`IO::Poll\*(C'\fR object when notifiers are added or removed from the loop, or when
they change their \f(CW\*(C`want_*\*(C'\fR status. The \f(CW\*(C`post_poll\*(C'\fR method inspects the
result bits and invokes the \f(CW\*(C`on_read_ready\*(C'\fR or \f(CW\*(C`on_write_ready\*(C'\fR methods on
the notifiers.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new"
.IX Subsection "new"
.Vb 1
\&   $loop = IO::Async::Loop::Poll\->new( %args )
.Ve
.PP
This function returns a new instance of a \f(CW\*(C`IO::Async::Loop::Poll\*(C'\fR object. It
takes the following named arguments:
.ie n .IP """poll""" 8
.el .IP "\f(CWpoll\fR" 8
.IX Item "poll"
The \f(CW\*(C`IO::Poll\*(C'\fR object to use for notification. Optional; if a value is not
given, the underlying \f(CW\*(C`IO::Poll::_poll()\*(C'\fR function is invoked directly,
outside of the object wrapping.
.SH "METHODS"
.IX Header "METHODS"
.SS "post_poll"
.IX Subsection "post_poll"
.Vb 1
\&   $count = $loop\->post_poll
.Ve
.PP
This method checks the returned event list from a \f(CW\*(C`IO::Poll::poll\*(C'\fR call,
and calls any of the notification methods or callbacks that are appropriate.
It returns the total number of callbacks that were invoked; that is, the
total number of \f(CW\*(C`on_read_ready\*(C'\fR and \f(CW\*(C`on_write_ready\*(C'\fR callbacks for 
\&\f(CW\*(C`watch_io\*(C'\fR, and \f(CW\*(C`watch_time\*(C'\fR event callbacks.
.SS "loop_once"
.IX Subsection "loop_once"
.Vb 1
\&   $count = $loop\->loop_once( $timeout )
.Ve
.PP
This method calls the \f(CW\*(C`poll\*(C'\fR method on the stored \f(CW\*(C`IO::Poll\*(C'\fR object,
passing in the value of \f(CW$timeout\fR, and then runs the \f(CW\*(C`post_poll\*(C'\fR method
on itself. It returns the total number of callbacks invoked by the 
\&\f(CW\*(C`post_poll\*(C'\fR method, or \f(CW\*(C`undef\*(C'\fR if the underlying \f(CW\*(C`poll\*(C'\fR method returned
an error.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
