.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Devel::Hide 3"
.TH Devel::Hide 3 "2013-01-28" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::Hide \- Forces the unavailability of specified Perl modules (for testing)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Devel::Hide qw(Module/ToHide.pm);
\&    require Module::ToHide; # fails 
\&
\&    use Devel::Hide qw(Test::Pod Test::Pod::Coverage);
\&    require Test::More; # ok
\&    use Test::Pod 1.18; # fails
.Ve
.PP
Other common usage patterns:
.PP
.Vb 1
\&    $ perl \-MDevel::Hide=Module::ToHide Makefile.PL
\&
\&    bash$ PERL5OPT=MDevel::Hide
\&    bash$ DEVEL_HIDE_PM=\*(AqModule::Which Test::Pod\*(Aq
\&    bash$ export PERL5OPT DEVEL_HIDE_PM
\&    bash$ perl Makefile.PL
.Ve
.PP
outputs (like blib)
.PP
.Vb 1
\&    Devel::Hide hides Module::Which, Test::Pod, etc.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Given a list of Perl modules/filenames, this module makes
\&\f(CW\*(C`require\*(C'\fR and \f(CW\*(C`use\*(C'\fR statements fail (no matter the
specified files/modules are installed or not).
.PP
They \fIdie\fR with a message like:
.PP
.Vb 1
\&    Can\*(Aqt locate Module/ToHide.pm (hidden)
.Ve
.PP
The original intent of this module is to allow Perl developers
to test for alternative behavior when some modules are not
available. In a Perl installation, where many modules are
already installed, there is a chance to screw things up
because you take for granted things that may not be there
in other machines.
.PP
For example, to test if your distribution does the right thing
when a module is missing, you can do
.PP
.Vb 1
\&    perl \-MDevel::Hide=Test::Pod Makefile.PL
.Ve
.PP
forcing \f(CW\*(C`Test::Pod\*(C'\fR to not be found (whether it is installed
or not).
.PP
Another use case is to force a module which can choose between
two requisites to use the one which is not the default.
For example, \f(CW\*(C`XML::Simple\*(C'\fR needs a parser module and may use
\&\f(CW\*(C`XML::Parser\*(C'\fR or \f(CW\*(C`XML::SAX\*(C'\fR (preferring the latter).
If you have both of them installed, it will always try \f(CW\*(C`XML::SAX\*(C'\fR.
But you can say:
.PP
.Vb 1
\&    perl \-MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl
.Ve
.PP
\&\s-1NOTE.\s0 This module does not use Carp. As said before,
denial \fIdies\fR.
.PP
This module is pretty trivial. It uses a code reference
in \f(CW@INC\fR to get rid of specific modules during require \-
denying they can be successfully loaded and stopping
the search before they have a chance to be found.
.PP
There are three alternative ways to include modules in
the hidden list:
.IP "\(bu" 4
setting \f(CW@Devel::Hide::HIDDEN\fR
.IP "\(bu" 4
environment variable \s-1DEVEL_HIDE_PM\s0
.IP "\(bu" 4
\&\fIimport()\fR
.PP
Optionally, you can propagate the list of hidden modules to your
process' child processes, by passing '\-from:children' as the
first option when you \fIuse()\fR this module. This works by populating
\&\f(CW\*(C`PERL5OPT\*(C'\fR, and is incompatible with Taint mode, as
explained in perlrun.
.SS "\s-1CAVEATS\s0"
.IX Subsection "CAVEATS"
There is some interaction between \f(CW\*(C`lib\*(C'\fR and this module
.PP
.Vb 2
\&    use Devel::Hide qw(Module/ToHide.pm);
\&    use lib qw(my_lib);
.Ve
.PP
In this case, 'my_lib' enters the include path before
the Devel::Hide hook and if \fIModule/ToHide.pm\fR is found
in 'my_lib', it succeeds.
.PP
Also for modules that were loaded before Devel::Hide,
\&\f(CW\*(C`require\*(C'\fR and \f(CW\*(C`use\*(C'\fR succeeds.
.PP
Since 0.0005, Devel::Hide warns about modules already loaded.
.PP
.Vb 2
\&    $ perl \-MDevel::Hide=Devel::Hide \-e \*(Aq\*(Aq
\&    Devel::Hide: Too late to hide Devel/Hide.pm
.Ve
.SS "\s-1EXPORTS\s0"
.IX Subsection "EXPORTS"
Nothing is exported.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
\&\s-1DEVEL_HIDE_PM\s0 \- if defined, the list of modules is added
   to the list of hidden modules
.PP
\&\s-1DEVEL_HIDE_VERBOSE\s0 \- on by default. If off, supresses
   the initial message which shows the list of hidden modules
   in effect
.PP
\&\s-1PERL5OPT\s0 \- used if you specify '\-from:children'
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"perldoc \-f require\*(R"
.PP
Test::Without::Module
.SH "BUGS"
.IX Header "BUGS"
Please report bugs via \s-1CPAN RT\s0 <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Devel\-Hide>.
.SH "AUTHORS"
.IX Header "AUTHORS"
Adriano R. Ferreira, <ferreira@cpan.org>
.PP
with contributions from David Cantrell <dcantrell@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005\-2007 by Adriano R. Ferreira
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
