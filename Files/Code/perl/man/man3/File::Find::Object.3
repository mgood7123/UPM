.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Find::Object 3"
.TH File::Find::Object 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Find::Object \- An object oriented File::Find replacement
.SH "VERSION"
.IX Header "VERSION"
version v0.3.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use File::Find::Object;
\&    my $tree = File::Find::Object\->new({}, @targets);
\&
\&    while (my $r = $tree\->next()) {
\&        print $r ."\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
File::Find::Object does the same job as File::Find but works like an object
and with an iterator. As File::Find is not object oriented, one cannot perform
multiple searches in the same application. The second problem of File::Find
is its file processing: after starting its main loop, one cannot easily wait
for another event and so get the next result.
.PP
With File::Find::Object you can get the next file by calling the \fInext()\fR
function, but setting a callback is still possible.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    my $ffo = File::Find::Object\->new( { options }, @targets);
.Ve
.PP
Create a new File::Find::Object object. \f(CW@targets\fR is the list of
directories or files which the object should explore.
.PP
\fIoptions\fR
.IX Subsection "options"
.IP "depth" 4
.IX Item "depth"
Boolean \- returns the directory content before the directory itself.
.IP "nocrossfs" 4
.IX Item "nocrossfs"
Boolean \- doesn't continue on filesystems different than the parent.
.IP "followlink" 4
.IX Item "followlink"
Boolean \- follow symlinks when they point to a directory.
.Sp
You can safely set this option to true as File::Find::Object does not follow
the link if it detects a loop.
.IP "filter" 4
.IX Item "filter"
Function reference \- should point to a function returning \s-1TRUE\s0 or \s-1FALSE.\s0 This
function is called with the filename to filter, if the function return \s-1FALSE,\s0
the file is skipped.
.IP "callback" 4
.IX Item "callback"
Function reference \- should point to a function, which would be called each
time a new file is returned. The function is called with the current filename
as an argument.
.SS "next"
.IX Subsection "next"
Returns the next file found by the File::Find::Object. It returns undef once
the scan is completed.
.SS "item"
.IX Subsection "item"
Returns the current filename found by the File::Find::Object object, i.e: the
last value returned by \fInext()\fR.
.SS "next_obj"
.IX Subsection "next_obj"
Like \fInext()\fR only returns the result as a convenient
File::Find::Object::Result object. \f(CW\*(C`$ff\->next()\*(C'\fR is equivalent to
\&\f(CW\*(C`$ff\->next_obj()\->path()\*(C'\fR.
.SS "item_obj"
.IX Subsection "item_obj"
Like \fIitem()\fR only returns the result as a convenient
File::Find::Object::Result object. \f(CW\*(C`$ff\->item()\*(C'\fR is equivalent to
\&\f(CW\*(C`$ff\->item_obj()\->path()\*(C'\fR.
.ie n .SS "$ff\->set_traverse_to([@children])"
.el .SS "\f(CW$ff\fP\->set_traverse_to([@children])"
.IX Subsection "$ff->set_traverse_to([@children])"
Sets the children to traverse to from the current node. Useful for pruning
items to traverse.
.PP
Accepts a single array reference.
.PP
Example:
.PP
.Vb 1
\&    $ff\->set_traverse_to([ grep { ! /\eA\e./ } @{ $ff\->get_traverse_to }]);
.Ve
.ie n .SS "$ff\->\fIprune()\fP"
.el .SS "\f(CW$ff\fP\->\fIprune()\fP"
.IX Subsection "$ff->prune()"
Prunes the current directory. Equivalent to \f(CW$ff\fR\->set_traverse_to([]).
.ie n .SS "[@children] = $ff\->\fIget_traverse_to()\fP"
.el .SS "[@children] = \f(CW$ff\fP\->\fIget_traverse_to()\fP"
.IX Subsection "[@children] = $ff->get_traverse_to()"
Retrieves the children that will be traversed to. Returns a single array
reference.
.PP
(Example under \f(CW\*(C`set_traverse_to\*(C'\fR).
.ie n .SS "[@files] = $ff\->\fIget_current_node_files_list()\fP"
.el .SS "[@files] = \f(CW$ff\fP\->\fIget_current_node_files_list()\fP"
.IX Subsection "[@files] = $ff->get_current_node_files_list()"
Gets all the files that appear in the current directory. This value remains
constant for every node, even after traversal or calls to \f(CW\*(C`set_traverse_to()\*(C'\fR
and is useful to use as the basis of the argument for \f(CW\*(C`set_traverse_to()\*(C'\fR.
.PP
Returns a single array reference.
.SH "BUGS"
.IX Header "BUGS"
No bugs are known, but it doesn't mean there aren't any.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There's an article about this module in the Perl Advent Calendar of 2006:
<http://perladvent.pm.org/2006/2/>.
.PP
File::Find is the core module for traversing files in perl, which has
several limitations.
.PP
File::Next, File::Find::Iterator, File::Walker and the unmaintained
File::FTS are alternatives to this module.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2005, 2006 by Olivier Thauvin
.PP
This package is free software; you can redistribute it and/or modify it under
the following terms:
.PP
1. The \s-1GNU\s0 General Public License Version 2.0 \-
http://www.opensource.org/licenses/gpl\-license.php
.PP
2. The Artistic License Version 2.0 \-
http://www.perlfoundation.org/legal/licenses/artistic\-2_0.html
.PP
3. At your option \- any later version of either or both of these licenses.
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomi Fish <shlomif@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2000 by Olivier Thauvin and others.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
http://rt.cpan.org/NoAuth/Bugs.html?Dist=File\-Find\-Object or by email to
bug\-file\-find\-object@rt.cpan.org.
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc File::Find::Object
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
MetaCPAN
.Sp
A modern, open-source \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<http://metacpan.org/release/File\-Find\-Object>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
The default \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<http://search.cpan.org/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's Bug Tracker
.Sp
The \s-1RT\s0 ( Request Tracker ) website is the default bug/issue tracking system for \s-1CPAN.\s0
.Sp
<https://rt.cpan.org/Public/Dist/Display.html?Name=File\-Find\-Object>
.IP "\(bu" 4
AnnoCPAN
.Sp
The AnnoCPAN is a website that allows community annotations of Perl module documentation.
.Sp
<http://annocpan.org/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
The \s-1CPAN\s0 Ratings is a website that allows community ratings and reviews of Perl modules.
.Sp
<http://cpanratings.perl.org/d/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Forum
.Sp
The \s-1CPAN\s0 Forum is a web forum for discussing Perl modules.
.Sp
<http://cpanforum.com/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPANTS\s0
.Sp
The \s-1CPANTS\s0 is a website that analyzes the Kwalitee ( code metrics ) of a distribution.
.Sp
<http://cpants.cpanauthors.org/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers
.Sp
The \s-1CPAN\s0 Testers is a network of smokers who run automated tests on uploaded \s-1CPAN\s0 distributions.
.Sp
<http://www.cpantesters.org/distro/F/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
The \s-1CPAN\s0 Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
<http://matrix.cpantesters.org/?dist=File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Dependencies
.Sp
The \s-1CPAN\s0 Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=File::Find::Object>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-file\-find\-object at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/Public/Bug/Report.html?Queue=File\-Find\-Object>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
The code is open to the world, and available for you to hack on. Please feel free to browse it and play
with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull
from your repository :)
.PP
<http://bitbucket.org/shlomif/perl\-file\-find\-object>
.PP
.Vb 1
\&  hg clone ssh://hg@bitbucket.org/shlomif/perl\-file\-find\-object
.Ve
