.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Constant 3"
.TH PPIx::Regexp::Constant 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Constant \- Constants for the PPIx::Regexp system
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use PPIx::Regexp::Constant qw{ TOKEN_UNKNOWN }
\& print "An unknown token\*(Aqs class is TOKEN_UNKNOWN\en";
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Constant\*(C'\fR is an Exporter.
.PP
\&\f(CW\*(C`PPIx::Regexp::Constant\*(C'\fR has no descendants.
.SH "DETAILS"
.IX Header "DETAILS"
This module defines manifest constants for use by the various
\&\f(CW\*(C`PPIx::Regexp\*(C'\fR modules. These constants are to be considered \fBprivate\fR
to the \f(CW\*(C`PPIx::Regexp\*(C'\fR system, and the author reserves the right to
change them without notice.
.PP
This module exports the following manifest constants:
.SS "\s-1COOKIE_CLASS\s0"
.IX Subsection "COOKIE_CLASS"
The name of the cookie used to control the construction of character
classes.
.PP
This cookie is set in
PPIx::Regexp::Token::Structure when
the left square bracket is encountered, and cleared in the same module
when a right square bracket is encountered.
.SS "\s-1COOKIE_QUANT\s0"
.IX Subsection "COOKIE_QUANT"
The name of the cookie used to control the construction of curly
bracketed quantifiers.
.PP
This cookie is set in
PPIx::Regexp::Token::Structure when a
left curly bracket is encountered. It requests itself to be cleared on
encountering anything other than a literal comma, a literal digit, or an
interpolation, or if more than one comma is encountered. If it survives
until PPIx::Regexp::Token::Structure
processes the right curly bracket, it is cleared there.
.SS "\s-1COOKIE_QUOTE\s0"
.IX Subsection "COOKIE_QUOTE"
The name of the cookie used to control the parsing of \f(CW\*(C`\eQ ... \eE\*(C'\fR
quoted literals.
.PP
This cookie is set in
PPIx::Regexp::Token::Control when a
\&\f(CW\*(C`\eQ\*(C'\fR is encountered, and it persists until the next \f(CW\*(C`\eE\*(C'\fR.
.SS "\s-1COOKIE_REGEX_SET\s0"
.IX Subsection "COOKIE_REGEX_SET"
The name of the cookie used to control regular expression sets.
.SS "\s-1LITERAL_LEFT_CURLY_ALLOWED\s0"
.IX Subsection "LITERAL_LEFT_CURLY_ALLOWED"
The Perl version at which allowed unescaped literal left curly brackets
were removed. This may make more sense if I mention that its value is
\&\f(CW\*(C`undef\*(C'\fR.
.SS "\s-1LITERAL_LEFT_CURLY_REMOVED_PHASE_1\s0"
.IX Subsection "LITERAL_LEFT_CURLY_REMOVED_PHASE_1"
The Perl version at which the first phase of unescaped literal left
curly bracket removal took place. The value of this constant is
\&\f(CW\*(Aq5.025001\*(Aq\fR.
.SS "\s-1LITERAL_LEFT_CURLY_REMOVED_PHASE_2\s0"
.IX Subsection "LITERAL_LEFT_CURLY_REMOVED_PHASE_2"
The Perl version at which the second phase of unescaped literal left
curly bracket removal took place. The value of this constant is
\&\f(CW\*(C`undef\*(C'\fR, but it will be assigned a value when the timing of the second
phase is known.
.SS "\s-1MINIMUM_PERL\s0"
.IX Subsection "MINIMUM_PERL"
The minimum version of Perl understood by this parser, as a float. It is
currently set to 5.000, since that is the minimum version of Perl
accessible to the author.
.SS "\s-1MODIFIER_GROUP_MATCH_SEMANTICS\s0"
.IX Subsection "MODIFIER_GROUP_MATCH_SEMANTICS"
The name of the
PPIx::Regexp::Token::Modifier group
used to control match semantics.
.SS "\s-1MSG_PROHIBITED_BY_STRICT\s0"
.IX Subsection "MSG_PROHIBITED_BY_STRICT"
An appropriate error message for an unknown entity created because
\&\f(CW\*(Aqstrict\*(Aq\fR was in effect. This is rank ad-hocery, and more than usually
subject to being changed, without any notice whatsoever. Caveat user.
.SS "\s-1NODE_UNKNOWN\s0"
.IX Subsection "NODE_UNKNOWN"
The name of the class that represents an unknown node. That is,
PPIx::Regexp::Node::Unknown.
.SS "\s-1RE_CAPTURE_NAME\s0"
.IX Subsection "RE_CAPTURE_NAME"
A string representation of a regular expression that matches the name of
a named capture buffer.
.SS "\s-1STRUCTURE_UNKNOWN\s0"
.IX Subsection "STRUCTURE_UNKNOWN"
The name of the class that represents an unknown structure. That is,
PPIx::Regexp::Structure::Unknown.
.SS "\s-1TOKEN_LITERAL\s0"
.IX Subsection "TOKEN_LITERAL"
The name of the class that represents a literal token. That is,
PPIx::Regexp::Token::Literal.
.SS "\s-1TOKEN_UNKNOWN\s0"
.IX Subsection "TOKEN_UNKNOWN"
The name of the class that represents the unknown token. That is,
PPIx::Regexp::Token::Unknown.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III\s0 \fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
