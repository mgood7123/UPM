.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Net::DNS::RR::OPT 3"
.TH Net::DNS::RR::OPT 3 "2017-08-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::RR::OPT \- DNS OPT resource record
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::DNS;
\&    $packet = new Net::DNS::Packet( ... );
\&
\&    $packet\->header\->do(1);                     # extended flag
\&
\&    $packet\->edns\->size(1280);                  # UDP payload size
\&
\&    $packet\->edns\->option( COOKIE => $cookie );
\&
\&    $packet\->edns\->print;
\&
\&    ;; EDNS version 0
\&    ;;      flags:  8000
\&    ;;      rcode:  NOERROR
\&    ;;      size:   1280
\&    ;;      option: COOKIE  => ( 7261776279746573 )
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1EDNS OPT\s0 pseudo resource record.
.PP
The \s-1OPT\s0 record supports \s-1EDNS\s0 protocol extensions and is not intended to be
created, accessed or modified directly by user applications.
.PP
All \s-1EDNS\s0 features are performed indirectly by operations on the objects
returned by the \f(CW$packet\fR\->header and \f(CW$packet\fR\->edns creator methods.
The underlying mechanisms are entirely hidden from the user.
.SH "METHODS"
.IX Header "METHODS"
The available methods are those inherited from the base class augmented
by the type-specific methods defined in this package.
.PP
Use of undocumented package features or direct access to internal data
structures is discouraged and could result in program termination or
other unpredictable behaviour.
.SS "version"
.IX Subsection "version"
.Vb 1
\&        $version = $rr\->version;
.Ve
.PP
The version of \s-1EDNS\s0 used by this \s-1OPT\s0 record.
.SS "size"
.IX Subsection "size"
.Vb 2
\&        $size = $packet\->edns\->size;
\&        $more = $packet\->edns\->size(1280);
.Ve
.PP
\&\fIsize()\fR advertises the maximum size (octets) of \s-1UDP\s0 packet that can be
reassembled in the network stack of the originating host.
.SS "rcode"
.IX Subsection "rcode"
.Vb 2
\&        $extended_rcode   = $packet\->header\->rcode;
\&        $incomplete_rcode = $packet\->edns\->rcode;
.Ve
.PP
The 12 bit extended \s-1RCODE.\s0 The most significant 8 bits reside in the \s-1OPT\s0
record. The least significant 4 bits can only be obtained from the packet
header.
.SS "flags"
.IX Subsection "flags"
.Vb 1
\&        $edns_flags = $packet\->edns\->flags;
\&
\&        $do = $packet\->header\->do;
\&        $packet\->header\->do(1);
.Ve
.PP
16 bit field containing \s-1EDNS\s0 extended header flags.
.SS "options, option"
.IX Subsection "options, option"
.Vb 1
\&        @option = $packet\->edns\->options;
\&
\&        $octets = $packet\->edns\->option($option_code);
\&
\&        $packet\->edns\->option( COOKIE => $cookie );
\&        $packet\->edns\->option( 10     => $cookie );
.Ve
.PP
When called in a list context, \fIoptions()\fR returns a list of option codes
found in the \s-1OPT\s0 record.
.PP
When called in a scalar context with a single argument,
\&\fIoption()\fR returns the uninterpreted octet string
corresponding to the specified option.
The method returns undef if the specified option is absent.
.PP
Options can be added or replaced by providing the (name => string) pair.
The option is deleted if the value is undefined.
.PP
When \fIoption()\fR is called in a list context with a single argument,
the returned array provides a structured interpretation
appropriate to the specified option.
.PP
For the example above:
.PP
.Vb 1
\&        %hash = $packet\->edns\->option(10);
\&
\&        {
\&            \*(AqCLIENT\-COOKIE\*(Aq => \*(Aqrawbytes\*(Aq,
\&            \*(AqSERVER\-COOKIE\*(Aq => undef
\&        };
.Ve
.PP
For some options, an array is more appropriate:
.PP
.Vb 1
\&        @algorithms = $packet\->edns\->option(6);
.Ve
.PP
Similar forms of array syntax may be used to construct the option value:
.PP
.Vb 2
\&        $packet\->edns\->option( DHU => [1, 2, 4] );
\&        $packet\->edns\->option( 6   => (1, 2, 4) );
\&
\&        $packet\->edns\->option( COOKIE => {\*(AqCLIENT\-COOKIE\*(Aq => $cookie} );
\&        $packet\->edns\->option( 10     => (\*(AqCLIENT\-COOKIE\*(Aq => $cookie) );
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)2001,2002 \s-1RIPE NCC.\s0  Author Olaf M. Kolkman.
.PP
Portions Copyright (c)2012,2017 Dick Franks.
.PP
All rights reserved.
.PP
Package template (c)2009,2012 O.M.Kolkman and R.W.Franks.
.SH "LICENSE"
.IX Header "LICENSE"
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided
that the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation, and that the name of the author not be used in advertising
or publicity pertaining to distribution of the software without specific
prior written permission.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::RR, \s-1RFC6891, RFC3225\s0
