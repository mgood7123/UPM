.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Calendar::Mayan 3"
.TH DateTime::Calendar::Mayan 3 "2017-10-02" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Calendar::Mayan \- The Mayan Long Count, Haab, and Tzolkin calendars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use DateTime::Calendar::Mayan
\&
\&   my $dtcm = DateTime::Calendar::Mayan\->new(
\&        baktun  => 12,
\&        katun   => 19,
\&        tun     => 10,
\&        uinal   => 2,
\&        kin     => 8,
\&        # alternate epoch
\&        epoch   => DateTime\->new(
\&                year    => \-3113,
\&                month   => 8,
\&                day     => 13,
\&            ),
\&    );
\&
\&   print $dtcm\->date; 
\&   # prints 12.19.10.2.8
\&   print $dtcm\->haab; 
\&   # prints 3 Uayeb
\&   print $dtcm\->tzolkin; 
\&   # prints 3 Oc
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An implementation of the Mayan Long Count, Haab, and Tzolkin calendars as
defined in \*(L"Calendrical Calculations The Millennium Edition\*(R".  Supplemented
by \*(L"Frequently Asked Questions about Calendars\*(R".
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
new( baktun => \f(CW$scalar\fR, ..., epoch => \f(CW$object\fR )
.Sp
Accepts a hash representing a date on the Long Count calendar
and a \*(L"DateTime::Calendar\*(R" object specifying an alternate epoch.
All keys are optional.
.Sp
.Vb 6
\&   The units are:
\&   kin   = 1 day
\&   uinal = 20 days
\&   tun   = 360 days
\&   katun = 7200 days
\&   baktun = 144000 days
.Ve
.Sp
In the future pictuns, calabtuns, kinchiltuns, and alautuns may be accepted.
.IP "\(bu" 4
now
.Sp
Alternate constructor.  Uses DateTime\->now to set the current date.
.IP "\(bu" 4
today
.Sp
Alternate constructor.  Uses DateTime\->today to set the current date.
.IP "\(bu" 4
clone
.Sp
This object method returns a replica of the given object.
.IP "\(bu" 4
from_object( object => \f(CW$object\fR )
.Sp
Accepts a \*(L"DateTime::Calendar\*(R" object.  Although this calendar doesn't support
time it will preserve the time value of objects passed to it.  This prevents a
loss of precision when chaining calendars.
.Sp
Note: Language support is not implemented.
.IP "\(bu" 4
utc_rd_values
.Sp
Returns the current \s-1UTC\s0 Rata Die days, \s-1UTC\s0 Rata Die seconds, and nanoseconds
as a three element list.
.IP "\(bu" 4
from_epoch( epoch => \f(CW$scalar\fR )
.Sp
Creates a new object from a number of seconds relative to midnight 1970\-01\-01.
.IP "\(bu" 4
epoch
.Sp
Returns the number of seconds since midnight 1970\-01\-01.
.IP "\(bu" 4
set_mayan_epoch( object => \f(CW$object\fR )
.Sp
Accepts a \*(L"DateTime::Calendar\*(R" object.  The epoch is set to this value
on a per object basis
.Sp
The default epoch is:
.Sp
Goodman-Martinez-Thompson
   Aug. 11, \-3113 / Sep. 6, 3114 B.C.E. / 584,283 \s-1JD\s0
.IP "\(bu" 4
mayan_epoch
.Sp
Returns a \*(L"DateTime::Calendar::Mayan\*(R" object set to the current Mayan epoch.
.IP "\(bu" 4
date
.IP "\(bu" 4
bktuk
.IP "\(bu" 4
long_count( \f(CW$scalar\fR )
.Sp
Returns the Long Count calendar date.  Think DateTime::ymd.  Like ymd this
method also accepts an optional field separator string.
.IP "\(bu" 4
haab( \f(CW$scalar\fR )
.Sp
Returns the Haab calendar date.  Accepts an optional field separator string.
.IP "\(bu" 4
tzolkin( \f(CW$scalar\fR )
.Sp
Returns the Tzolkin calendar date.  Accepts an optional field separator string.
.IP "\(bu" 4
baktun
.IP "\(bu" 4
katun
.IP "\(bu" 4
tun
.IP "\(bu" 4
uinal
.IP "\(bu" 4
kin( \f(CW$scalar\fR )
.Sp
Gets/Sets the long count value of the function name.
.IP "\(bu" 4
set_baktun
.IP "\(bu" 4
set_katun
.IP "\(bu" 4
set_tun
.IP "\(bu" 4
set_uinal
.IP "\(bu" 4
set_kin( \f(CW$scalar\fR )
.Sp
Aliases to the combined accessor/mutators.
.IP "\(bu" 4
set( baktun => \f(CW$scalar\fR, ... )
.Sp
Accepts a hash specifying new long count values.  All units are optional.
.IP "\(bu" 4
add
.IP "\(bu" 4
subtract( baktun => \f(CW$scalar\fR, ... )
.Sp
Accepts a hash specifying values to add or subject from the long count.
All units are optional.
.IP "\(bu" 4
add_duration
.IP "\(bu" 4
subtract_duration( \f(CW$object\fR )
.Sp
Accepts a \*(L"DateTime::Duration\*(R" object and either adds or subtracts it from the
current date.   See the DateTime::Duration docs for more details.
.SH "BACKGROUND"
.IX Header "BACKGROUND"
Please see:
.PP
Chapter 10 of Calendarical Calculations \*(L"The Millennium Edition\*(R".
.PP
and
.PP
Chapter 7 of Frequently Asked Questions about Calendars.
   http://www.tondering.dk/claus/cal/node8.html
.SH "GOTCHAS"
.IX Header "GOTCHAS"
The Long Count calendar is cyclical and it is possible to have different dates
in other calendars that convert to be the same Long Count date.  Under this
calendar the dates 0.0.0.0.0 and 13.0.0.0.0 are equivalent.
.PP
The Long Count calendar will next roll over in late 2012 (Gregorian).  In
anticipation of this Long Count dates input as 0\-12.*.*.*.* will convert to
Gregorian dates in the Mayan year that started in \-3113 (Gregorian).  Long
Count dates input as 13.*.*.*.* will convert to Gregorian dates in the Mayan
year that start in 2012 (Gregorian).
.PP
Example:
.PP
.Vb 2
\&   use DateTime;
\&   use DateTime::Calendar::Mayan;
\&
\&   my $dtcm = DateTime::Calendar::Mayan\->new( baktun => 0 );
\&   print $dtcm\->date, "\en";
\&   print DateTime\->from_object( object => $dtcm )\->ymd, "\en";
\&
\&   $dtcm\->set( baktun => 13);
\&   print $dtcm\->date, "\en";
\&   print DateTime\->from_object( object => $dtcm )\->ymd, "\en";
.Ve
.PP
Will print:
.PP
.Vb 4
\&   13.0.0.0.0
\&   \-3113\-08\-11
\&   13.0.0.0.0
\&   2012\-12\-21
.Ve
.PP
As you can see the Long Count dates are identical but the Gregorian equivalent
dates are different.
.PP
Support for a count of Mayan \*(L"years\*(R" or \*(L"cycles\*(R" allowing accurate conversion
to/from Gregorian dates may be added to this module in the future.  This would
be an extension to the historical Long Count calendar.
.SH "CREDITS"
.IX Header "CREDITS"
Dave Rolsky (\s-1DROLSKY\s0) for the DateTime project and carrying
us this far.
.PP
Eugene van der Pijll (\s-1PIJLL\s0) for DateTime::Calendar::Julian
which I looked at more then once.
.PP
Calendrical Calculations
\&\*(L"The Millennium Edition\*(R"
By Edward M. Reingold & Nachum Dershowitz.
(\s-1ISBN 0\-521\-77752\-6\s0 paperback)
   http://www.calendarists.com
.PP
Abigail (\s-1ABIGAIL\s0) for Date::Maya from which I confirmed the algorithm
for Mayan years.
.PP
\&\*(L"Frequently Asked Questions about Calendars\*(R" by
Claus To\*/ndering.
   http://www.tondering.dk/claus/calendar.html
.SH "SUPPORT"
.IX Header "SUPPORT"
Support for this module is provided via the datetime@perl.org email
list. See http://lists.perl.org/ for more details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joshua Hoblitt <jhoblitt@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003 Joshua Hoblitt.  All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included
with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
datetime@perl.org mailing list
.PP
http://datetime.perl.org/
