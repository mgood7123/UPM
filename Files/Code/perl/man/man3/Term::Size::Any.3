.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Term::Size::Any 3"
.TH Term::Size::Any 3 "2012-04-20" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Term::Size::Any \- Retrieve terminal size
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # the traditional way
\&    use Term::Size::Any qw( chars pixels );
\&
\&    ($columns, $rows) = chars *STDOUT{IO};
\&    ($x, $y) = pixels;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a unified interface to retrieve terminal size.
It loads one module of a list of known alternatives,
each implementing some way to get the desired terminal
information. This loaded module will actually do the job
on behalf of \f(CW\*(C`Term::Size::Any\*(C'\fR.
.PP
Thus, \f(CW\*(C`Term::Size::Any\*(C'\fR
depends on the availability of one of these modules:
.PP
.Vb 4
\&    Term::Size           (soon to be supported)
\&    Term::Size::Perl
\&    Term::Size::ReadKey  (soon to be supported)
\&    Term::Size::Win32
.Ve
.PP
This release fallbacks to Term::Size::Win32 if
running in Windows 32 systems. For other platforms,
it uses the first of
Term::Size::Perl, Term::Size or Term::Size::ReadKey
which loads successfully. (To be honest,
I disabled the fallback to Term::Size and Term::Size::ReadKey
which are buggy by now.)
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
The traditional interface is by importing functions
\&\f(CW\*(C`chars\*(C'\fR and \f(CW\*(C`pixels\*(C'\fR into the caller's space.
.IP "\fBchars\fR" 4
.IX Item "chars"
.Vb 2
\&    ($columns, $rows) = chars($h);
\&    $columns = chars($h);
.Ve
.Sp
\&\f(CW\*(C`chars\*(C'\fR returns the terminal size in units of characters
corresponding to the given filehandle \f(CW$h\fR.
If the argument is omitted, \f(CW*STDIN{IO}\fR is used.
In scalar context, it returns the terminal width.
.IP "\fBpixels\fR" 4
.IX Item "pixels"
.Vb 2
\&    ($x, $y) = pixels($h);
\&    $x = pixels($h);
.Ve
.Sp
\&\f(CW\*(C`pixels\*(C'\fR returns the terminal size in units of pixels
corresponding to the given filehandle \f(CW$h\fR.
If the argument is omitted, \f(CW*STDIN{IO}\fR is used.
In scalar context, it returns the terminal width.
.Sp
Many systems with character-only terminals will return \f(CW\*(C`(0, 0)\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
It all began with Term::Size by Tim Goodwin. You may want to
have a look at:
.PP
.Vb 4
\&    Term::Size
\&    Term::Size::Perl
\&    Term::Size::Win32
\&    Term::Size::ReadKey
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please reports bugs via \s-1CPAN RT,\s0 via web
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Term\-Size\-Any
or e\-mail to bug\-Term\-Size\-Any@rt.cpan.org.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adriano R. Ferreira, <ferreira@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2012 by Adriano R. Ferreira
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
