.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Declare::Constraints::Simple::Library::Hash 3"
.TH Declare::Constraints::Simple::Library::Hash 3 "2006-09-11" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Declare::Constraints::Simple::Library::Hash \- Hash Constraints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $constraint = And(
\&
\&    # make sure all keys are present
\&    HasAllKeys( qw(foo bar) ),
\&
\&    # constraints for the keys
\&    OnHashKeys( foo => IsInt, bar => HasLength )
\&
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains all constraints that can be applied to hash
references.
.SS "HasAllKeys(@keys)"
.IX Subsection "HasAllKeys(@keys)"
The value has to be a hashref, and contain all keys listed in 
\&\f(CW@keys\fR to pass this constraint.
.PP
The stack or path part of \f(CW\*(C`HasAllKeys\*(C'\fR is \f(CW\*(C`HasAllKeys[$key]\*(C'\fR where
\&\f(CW$key\fR is the missing key.
.ie n .SS "OnHashKeys(key => $constraint, key => $constraint, ...)"
.el .SS "OnHashKeys(key => \f(CW$constraint\fP, key => \f(CW$constraint\fP, ...)"
.IX Subsection "OnHashKeys(key => $constraint, key => $constraint, ...)"
This allows you to pass a constraint for each specific key in
a hash reference. If a specified key is not in the validated
hash reference, the validation for this key is not done. To make
a key a requirement, use HasAllKeys(@keys) above in combination
with this, e.g. like:
.PP
.Vb 4
\&  And( HasAllKeys( qw(foo bar baz) )
\&       OnHashKeys( foo => IsInt,
\&                   bar => Matches(qr/bar/),
\&                   baz => IsArrayRef( HasLength )));
.Ve
.PP
Also, as you might see, you don't have to check for \f(CW\*(C`IsHashRef\*(C'\fR
validity here. The hash constraints are already doing that by
themselves.
.PP
The stack or path part of \f(CW\*(C`OnHashKeys\*(C'\fR looks like \f(CW\*(C`OnHashKeys[$key]\*(C'\fR
where \f(CW$key\fR is the key of the failing value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Declare::Constraints::Simple, Declare::Constraints::Simple::Library
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert 'phaylon' Sedlacek \f(CW\*(C`<phaylon@dunkelheit.at>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This module is free software, you can redistribute it and/or modify it 
under the same terms as perl itself.
