.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Regexp::Util 3"
.TH Regexp::Util 3 "2014-09-17" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Regexp::Util \- A selection of general\-utility regexp subroutines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Regexp::Util qw( :all );
\&   
\&   my $stringified = serialize_regexp( qr/^foo/ );
\&   my $regexp      = deserialize_regexp( $stringified );
\&   
\&   "foobar" =~ $regexp;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides the following functions:
.ie n .IP """is_regexp($ref)""" 4
.el .IP "\f(CWis_regexp($ref)\fR" 4
.IX Item "is_regexp($ref)"
Returns a boolean indicating whether \f(CW$ref\fR is a regexp reference.
Is not tricked by blessed regexps.
.ie n .IP """regexp_seen_evals($re)""" 4
.el .IP "\f(CWregexp_seen_evals($re)\fR" 4
.IX Item "regexp_seen_evals($re)"
Returns true if \f(CW$re\fR contains embedded Perl code.
.ie n .IP """regexp_is_foreign($re)""" 4
.el .IP "\f(CWregexp_is_foreign($re)\fR" 4
.IX Item "regexp_is_foreign($re)"
Returns true if \f(CW$re\fR uses a regexp engine plugin.
.Sp
(Since Perl 5.10, it has been possible to use regexp engine plugins,
such as re::engine::PCRE and re::engine::RE2.)
.ie n .IP """regexp_is_anchored($re)""" 4
.el .IP "\f(CWregexp_is_anchored($re)\fR" 4
.IX Item "regexp_is_anchored($re)"
Returns true if \f(CW$re\fR is anchored at the start (e.g. \f(CW\*(C`qr/^foo/\*(C'\fR).
.ie n .IP """serialize_regexp($re)""" 4
.el .IP "\f(CWserialize_regexp($re)\fR" 4
.IX Item "serialize_regexp($re)"
Serializes the regexp to a string of Perl code.
.Sp
Croaks if the regexp contains embedded Perl code, or uses a regexp engine
plugin.
.ie n .IP """deserialize_regexp($str)""" 4
.el .IP "\f(CWdeserialize_regexp($str)\fR" 4
.IX Item "deserialize_regexp($str)"
Evaluates a string of Perl code generated by \f(CW\*(C`serialize_regexp\*(C'\fR to
return the original regexp object. Uses Safe, and also checks that
the return value is a regexp, so should be \fIsomewhat\fR safer than
\&\f(CW\*(C`eval($str)\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to
<http://rt.cpan.org/Dist/Display.html?Queue=Regexp\-Util>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
More regexp stuff:
re.
.PP
Other util modules:
Scalar::Util,
List::Util,
Hash::Util.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2014 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
