.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Find::Object::Result 3"
.TH File::Find::Object::Result 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Find::Object::Result \- a result class for File::Find::Object
.SH "VERSION"
.IX Header "VERSION"
version v0.3.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a class returning a single File::Find::Object result as returned
by its \fInext_obj()\fR method.
.SH "METHODS"
.IX Header "METHODS"
.SS "File::Find::Object::Result\->new({%args});"
.IX Subsection "File::Find::Object::Result->new({%args});"
Initializes a new object from \f(CW%args\fR. For internal use.
.ie n .SS "$result\->\fIbase()\fP"
.el .SS "\f(CW$result\fP\->\fIbase()\fP"
.IX Subsection "$result->base()"
Returns the base directory from which searching began.
.ie n .SS "$result\->\fIpath()\fP"
.el .SS "\f(CW$result\fP\->\fIpath()\fP"
.IX Subsection "$result->path()"
Returns the full path of the result. As such \f(CW\*(C`$ffo\->next_obj()\->path()\*(C'\fR
is equivalent to \f(CW\*(C`$ffo\->next()\*(C'\fR .
.ie n .SS "$result\->\fIis_dir()\fP"
.el .SS "\f(CW$result\fP\->\fIis_dir()\fP"
.IX Subsection "$result->is_dir()"
Returns true if the result refers to a directory.
.ie n .SS "$result\->\fIis_file()\fP"
.el .SS "\f(CW$result\fP\->\fIis_file()\fP"
.IX Subsection "$result->is_file()"
Returns true if the result refers to a plain file (equivalent to the Perl
\&\f(CW\*(C`\-f\*(C'\fR operator).
.ie n .SS "$result\->\fIis_link()\fP"
.el .SS "\f(CW$result\fP\->\fIis_link()\fP"
.IX Subsection "$result->is_link()"
Returns true if the result is a symbolic link.
.ie n .SS "$result\->\fIdir_components()\fP"
.el .SS "\f(CW$result\fP\->\fIdir_components()\fP"
.IX Subsection "$result->dir_components()"
The components of the directory part of the path starting from \fIbase()\fR
(also the full path if the result is a directory) as an array reference.
.ie n .SS "$result\->\fIbasename()\fP"
.el .SS "\f(CW$result\fP\->\fIbasename()\fP"
.IX Subsection "$result->basename()"
Returns the basename of the file (if it is a file and not a directory.)
Otherwise \- \fIundef()\fR.
.ie n .SS "$result\->\fIfull_components()\fP"
.el .SS "\f(CW$result\fP\->\fIfull_components()\fP"
.IX Subsection "$result->full_components()"
Returns the full components of the result with the basename if it is
a file.
.PP
Returns a single array reference.
.ie n .SS "$result\->\fIstat_ret()\fP"
.el .SS "\f(CW$result\fP\->\fIstat_ret()\fP"
.IX Subsection "$result->stat_ret()"
The return value of \*(L"stat\*(R" in perlfunc for the result, placed
inside an array reference. This is calculated by File::Find::Object and
kept here for convenience and for internal use.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::Find::Object
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) 2005, 2006 by Olivier Thauvin
.PP
This package is free software; you can redistribute it and/or modify it under
the following terms:
.PP
1. The \s-1GNU\s0 General Public License Version 2.0 \-
http://www.opensource.org/licenses/gpl\-license.php
.PP
2. The Artistic License Version 2.0 \-
http://www.perlfoundation.org/legal/licenses/artistic\-2_0.html
.PP
3. At your option \- any later version of either or both of these licenses.
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomi Fish <shlomif@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2000 by Olivier Thauvin and others.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
http://rt.cpan.org/NoAuth/Bugs.html?Dist=File\-Find\-Object or by email to
bug\-file\-find\-object@rt.cpan.org.
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc File::Find::Object
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
MetaCPAN
.Sp
A modern, open-source \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<http://metacpan.org/release/File\-Find\-Object>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
The default \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
<http://search.cpan.org/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's Bug Tracker
.Sp
The \s-1RT\s0 ( Request Tracker ) website is the default bug/issue tracking system for \s-1CPAN.\s0
.Sp
<https://rt.cpan.org/Public/Dist/Display.html?Name=File\-Find\-Object>
.IP "\(bu" 4
AnnoCPAN
.Sp
The AnnoCPAN is a website that allows community annotations of Perl module documentation.
.Sp
<http://annocpan.org/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
The \s-1CPAN\s0 Ratings is a website that allows community ratings and reviews of Perl modules.
.Sp
<http://cpanratings.perl.org/d/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Forum
.Sp
The \s-1CPAN\s0 Forum is a web forum for discussing Perl modules.
.Sp
<http://cpanforum.com/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPANTS\s0
.Sp
The \s-1CPANTS\s0 is a website that analyzes the Kwalitee ( code metrics ) of a distribution.
.Sp
<http://cpants.cpanauthors.org/dist/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers
.Sp
The \s-1CPAN\s0 Testers is a network of smokers who run automated tests on uploaded \s-1CPAN\s0 distributions.
.Sp
<http://www.cpantesters.org/distro/F/File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
The \s-1CPAN\s0 Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
<http://matrix.cpantesters.org/?dist=File\-Find\-Object>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Dependencies
.Sp
The \s-1CPAN\s0 Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=File::Find::Object>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-file\-find\-object at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/Public/Bug/Report.html?Queue=File\-Find\-Object>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
The code is open to the world, and available for you to hack on. Please feel free to browse it and play
with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull
from your repository :)
.PP
<http://bitbucket.org/shlomif/perl\-file\-find\-object>
.PP
.Vb 1
\&  hg clone ssh://hg@bitbucket.org/shlomif/perl\-file\-find\-object
.Ve
