.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Test::DependentModules 3"
.TH Test::DependentModules 3 "2015-11-07" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::DependentModules \- Test all modules which depend on your module
.SH "VERSION"
.IX Header "VERSION"
version 0.26
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::DependentModules qw( test_all_dependents );
\&
\&    test_all_dependents(\*(AqMy::Module\*(Aq);
\&
\&    # or ...
\&
\&    use Test::DependentModules qw( test_module );
\&    use Test::More tests => 3;
\&
\&    test_module(\*(AqException::Class\*(Aq);
\&    test_module(\*(AqDateTime\*(Aq);
\&    test_module(\*(AqLog::Dispatch\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING\s0\fR: The tests this module does should \fBnever\fR be included as part of
a normal \s-1CPAN\s0 install!
.PP
This module is intended as a tool for module authors who would like to easily
test that a module release will not break dependencies. This is particularly
useful for module authors (like myself) who have modules which are a
dependency of many other modules.
.SS "How It Works"
.IX Subsection "How It Works"
Internally, this module will download dependencies from \s-1CPAN\s0 and run their
tests. If those dependencies in turn have unsatisfied dependencies, they are
installed into a temporary directory. These second-level (and third\-, etc)
dependencies are \fInot\fR tested.
.PP
In order to avoid prompting, this module sets \f(CW$ENV{PERL_AUTOINSTALL}\fR to
\&\f(CW\*(C`\-\-defaultdeps\*(C'\fR and sets \f(CW$ENV{PERL_MM_USE_DEFAULT}\fR to a true value.
.PP
Nonetheless, some ill-behaved modules will \fIstill\fR wait for a
prompt. Unfortunately, because of the way this module attempts to keep output
to a minimum, you won't see these prompts. Patches are welcome.
.SS "Running Tests in Parallel"
.IX Subsection "Running Tests in Parallel"
If you're testing a lot of modules, you might benefit from running tests in
parallel. You'll need to have Parallel::ForkManager installed for this to
work.
.PP
Set the \f(CW$ENV{PERL_TEST_DM_PROCESSES}\fR env var to a value greater than 1 to
enable parallel testing.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This module optionally exports three functions:
.ie n .SS "test_all_dependents( $module, { filter => sub { ... } } )"
.el .SS "test_all_dependents( \f(CW$module\fP, { filter => sub { ... } } )"
.IX Subsection "test_all_dependents( $module, { filter => sub { ... } } )"
Given a module name, this function uses MetaCPAN::Client to find all its
dependencies and test them. It will set a test plan for you.
.PP
If you provide a \f(CW\*(C`filter\*(C'\fR sub, it will be called with a single argument, the
\&\fIdistribution name\fR, which will be something like \*(L"Test-DependentModules\*(R"
(note the lack of colons). The filter should return a true or false value to
indicate whether or not to test that distribution.
.PP
If you don't provide a filter, you can provide a regex to use by passing an
\&\f(CW\*(C`exclude\*(C'\fR key in the hashref. Anything that matches the regex is excluded.
.PP
Additionally, any distribution name starting with \*(L"Task\*(R" or \*(L"Bundle\*(R" is always
excluded.
.SS "test_modules(@names)"
.IX Subsection "test_modules(@names)"
Given a list of module names, this function will test them all. You can use
this if you'd prefer to hard code a list of modules to test.
.PP
In this case, you will have to handle your own test planning.
.SS "test_module($name)"
.IX Subsection "test_module($name)"
\&\fB\s-1DEPRECATED\s0\fR. Use the \f(CW\*(C`test_modules()\*(C'\fR sub instead, so you can run
optionally run tests in parallel.
.PP
Given a module name, this function will test it. You can use this if you'd
prefer to hard code a list of modules to test.
.PP
In this case, you will have to handle your own test planning.
.SH "PERL5LIB FOR DEPENDENCIES"
.IX Header "PERL5LIB FOR DEPENDENCIES"
If you want to include a module-to-be-released in the path seen by
dependencies, you must make sure that the correct path ends up in
\&\f(CW$ENV{PERL5LIB}\fR. If you use \f(CW\*(C`prove \-l\*(C'\fR or \f(CW\*(C`prove \-b\*(C'\fR to run tests, then
that will happen automatically.
.SH "WARNINGS, LOGGING AND VERBOSITY"
.IX Header "WARNINGS, LOGGING AND VERBOSITY"
By default, this module attempts to quiet down \s-1CPAN\s0 and the module building
toolchain as much as possible. However, when there are test failures in a
dependency it's nice to see the output.
.PP
In addition, if the tests spit out warnings but still pass, this will just be
treated as a pass.
.PP
If you enable logging, this module log all successes, warnings, and failures,
along with the full output of the test suite for each dependency. In addition,
it logs what prereqs it installs, since you may want to install some of them
permanently to speed up future tests.
.PP
To enable logging, you must provide a directory to which log files will be
written. The log file names are of the form \f(CW\*(C`test\-my\-deps\-$$\-$type.log\*(C'\fR,
where \f(CW$type\fR is one of \*(L"status\*(R", \*(L"error\*(R", or \*(L"prereq\*(R".
.PP
The directory should be provided in \f(CW$ENV{PERL_TEST_DM_LOG_DIR}\fR. The
directory must already exist.
.PP
You also can enable \s-1CPAN\s0's output by setting the
\&\f(CW$ENV{PERL_TEST_DM_CPAN_VERBOSE}\fR variable to a true value.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-test\-mydeps@rt.cpan.org\*(C'\fR,
or through the web interface at <http://rt.cpan.org>.  I will be notified,
and then you'll automatically be notified of progress on your bug as I make
changes.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module, please
consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of free time
creating free software, and would appreciate any support you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order for me
to continue working on this particular software. I will continue to do so,
inasmuch as I have in the past, for as long as it interests me.
.PP
Similarly, a donation made in this way will probably not make me work on this
software much more, unless I get so many donations that I can consider working
on free software full time, which seems unlikely at best.
.PP
To donate, log into PayPal and send money to autarch@urth.org or use the
button on this page: <http://www.urth.org/~autarch/fs\-donation.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Graham Knop <haarg@haarg.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
mickey <mickey75@gmail.com>
.IP "\(bu" 4
Sawyer X <xsawyerx@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
