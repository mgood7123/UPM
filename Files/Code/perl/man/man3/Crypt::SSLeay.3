.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "SSLeay 3"
.TH SSLeay 3 "2014-04-24" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::SSLeay \- OpenSSL support for LWP
.SH "HEARTBLEED WARNING"
.IX Header "HEARTBLEED WARNING"
\&\f(CW\*(C`perl Makefile.PL\*(C'\fR will display a warning if it thinks your OpenSSL might be vulnerable to the  Heartbleed Bug <https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160>. You can, of course, go ahead and install the module, but you should be aware that your system might be exposed to an extremely serious vulnerability. This is just a heuristic based on the version reported by OpenSSL. It is entirely possible that your distrbution actually pushed a patched library, so if you have concerns, you should investigate further.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::SSL;
\&    use LWP::UserAgent;
\&
\&    my $ua  = LWP::UserAgent\->new(
\&        ssl_opts => { verify_hostname => 0 },
\&    );
\&
\&    my $response = $ua\->get(\*(Aqhttps://www.example.com/\*(Aq);
\&    print $response\->content, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Perl module provides support for the \s-1HTTPS\s0 protocol under \s-1LWP\s0, to
allow an LWP::UserAgent object to perform \s-1GET, HEAD,\s0 and \s-1POST\s0 requests
over encrypted socket connections. Please see \s-1LWP\s0 for more information
on \s-1POST\s0 requests.
.PP
The \f(CW\*(C`Crypt::SSLeay\*(C'\fR package provides \f(CW\*(C`Net::SSL\*(C'\fR, which, if requested, is
loaded by \f(CW\*(C`LWP::Protocol::https\*(C'\fR for https requests and provides the
necessary \s-1SSL\s0 glue.
.PP
This distribution also makes following deprecated modules available:
.PP
.Vb 3
\&    Crypt::SSLeay::CTX
\&    Crypt::SSLeay::Conn
\&    Crypt::SSLeay::X509
.Ve
.SH "DO YOU NEED Crypt::SSLeay?"
.IX Header "DO YOU NEED Crypt::SSLeay?"
Starting with version 6.02 of \s-1LWP\s0, \f(CW\*(C`https\*(C'\fR support was unbundled into
LWP::Protocol::https. This module specifies as one of its prerequisites
IO::Socket::SSL which is automatically used by LWP::UserAgent unless
this preference is overridden separately. \f(CW\*(C`IO::Socket::SSL\*(C'\fR is a more
complete implementation, and, crucially, it allows hostname verification.
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR does not support this. At this point, \f(CW\*(C`Crypt::SSLeay\*(C'\fR is
maintained to support existing software that already depends on it.
However, it is possible that your software does not really depend on
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR, only on the ability of \f(CW\*(C`LWP::UserAgent\*(C'\fR class to
communicate with sites over \s-1SSL/TLS.\s0
.PP
If are using version \f(CW\*(C`LWP\*(C'\fR 6.02 or later, and therefore have installed
\&\f(CW\*(C`LWP::Protocol::https\*(C'\fR and its dependencies, and do not explicitly \f(CW\*(C`use\*(C'\fR
\&\f(CW\*(C`Net::SSL\*(C'\fR before loading \f(CW\*(C`LWP::UserAgent\*(C'\fR, or override the default socket
class, you are probably using \f(CW\*(C`IO::Socket::SSL\*(C'\fR and do not really need
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR.
.PP
If you have both \f(CW\*(C`Crypt::SSLeay\*(C'\fR and \f(CW\*(C`IO::Socket::SSL\*(C'\fR installed, and
would like to force \f(CW\*(C`LWP::UserAgent\*(C'\fR to use \f(CW\*(C`Crypt::SSLeay\*(C'\fR, you can
use:
.PP
.Vb 3
\&    use Net::HTTPS;
\&    $Net::HTTPS::SSL_SOCKET_CLASS = \*(AqNet::SSL\*(Aq;
\&    use LWP::UserAgent;
.Ve
.PP
or
.PP
.Vb 2
\&    local $ENV{PERL_NET_HTTPS_SSL_SOCKET_CLASS} = \*(AqNet::SSL\*(Aq;
\&    use LWP::UserAgent;
.Ve
.PP
or
.PP
.Vb 2
\&    use Net::SSL;
\&    use LWP::UserAgent;
.Ve
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "Specify \s-1SSL\s0 Socket Class" 4
.IX Item "Specify SSL Socket Class"
\&\f(CW$ENV{PERL_NET_HTTPS_SSL_SOCKET_CLASS}\fR can be used to instruct
\&\f(CW\*(C`LWP::UserAgent\*(C'\fR to use \f(CW\*(C`Net::SSL\*(C'\fR for \s-1HTTPS\s0 support rather than
\&\f(CW\*(C`IO::Socket::SSL\*(C'\fR.
.IP "Proxy Support" 4
.IX Item "Proxy Support"
.Vb 1
\&    $ENV{HTTPS_PROXY} = \*(Aqhttp://proxy_hostname_or_ip:port\*(Aq;
.Ve
.IP "Proxy Basic Authentication" 4
.IX Item "Proxy Basic Authentication"
.Vb 2
\&    $ENV{HTTPS_PROXY_USERNAME} = \*(Aqusername\*(Aq;
\&    $ENV{HTTPS_PROXY_PASSWORD} = \*(Aqpassword\*(Aq;
.Ve
.IP "\s-1SSL\s0 diagnostics and Debugging" 4
.IX Item "SSL diagnostics and Debugging"
.Vb 1
\&    $ENV{HTTPS_DEBUG} = 1;
.Ve
.IP "Default \s-1SSL\s0 Version" 4
.IX Item "Default SSL Version"
.Vb 1
\&    $ENV{HTTPS_VERSION} = \*(Aq3\*(Aq;
.Ve
.IP "Client Certificate Support" 4
.IX Item "Client Certificate Support"
.Vb 2
\&    $ENV{HTTPS_CERT_FILE} = \*(Aqcerts/notacacert.pem\*(Aq;
\&    $ENV{HTTPS_KEY_FILE}  = \*(Aqcerts/notacakeynopass.pem\*(Aq;
.Ve
.IP "\s-1CA\s0 cert Peer Verification" 4
.IX Item "CA cert Peer Verification"
.Vb 2
\&    $ENV{HTTPS_CA_FILE}   = \*(Aqcerts/ca\-bundle.crt\*(Aq;
\&    $ENV{HTTPS_CA_DIR}    = \*(Aqcerts/\*(Aq;
.Ve
.IP "Client \s-1PKCS12\s0 cert support" 4
.IX Item "Client PKCS12 cert support"
.Vb 2
\&    $ENV{HTTPS_PKCS12_FILE}     = \*(Aqcerts/pkcs12.pkcs12\*(Aq;
\&    $ENV{HTTPS_PKCS12_PASSWORD} = \*(AqPKCS12_PASSWORD\*(Aq;
.Ve
.SH "INSTALL"
.IX Header "INSTALL"
.SS "OpenSSL"
.IX Subsection "OpenSSL"
You must have OpenSSL installed before compiling this module. You can get
the latest OpenSSL package from <https://www.openssl.org/source/>. We no
longer support pre\-2000 versions of OpenSSL.
.PP
If you are building OpenSSL from source, please follow the directions
included in the source package.
.SS "Crypt::SSLeay via Makefile.PL"
.IX Subsection "Crypt::SSLeay via Makefile.PL"
\&\f(CW\*(C`Makefile.PL\*(C'\fR accepts the following command line arguments:
.ie n .IP """incpath""" 4
.el .IP "\f(CWincpath\fR" 4
.IX Item "incpath"
Path to OpenSSL headers. Can also be specified via \f(CW$ENV{OPENSSL_INCLUDE}\fR.
If the command line argument is provided, it overrides any value specified
via the environment variable. Of course, you can ignore both the command
line argument and the environment variable, and just add the path to your
compiler specific environment variable such as \f(CW\*(C`CPATH\*(C'\fR or \f(CW\*(C`INCLUDE\*(C'\fR etc.
.ie n .IP """libpath""" 4
.el .IP "\f(CWlibpath\fR" 4
.IX Item "libpath"
Path to OpenSSL libraries. Can also be specified via \f(CW$ENV{OPENSSL_LIB}\fR.
If the command line argument is provided, it overrides any value specified
by the environment variable. Of course, you can ignore both the command line
argument and the environment variable and just add the path to your compiler
specific environment variable such as \f(CW\*(C`LIBRARY_PATH\*(C'\fR or \f(CW\*(C`LIB\*(C'\fR etc.
.ie n .IP """live\-tests""" 4
.el .IP "\f(CWlive\-tests\fR" 4
.IX Item "live-tests"
Use \f(CW\*(C`\-\-live\-tests\*(C'\fR to request tests that try to connect to an external web
site, and \f(CW\*(C`\-\-no\-live_tests\*(C'\fR to prevent such tests from running. If you run
\&\f(CW\*(C`Makefile.PL\*(C'\fR interactively, and this argument is not specified on the
command line, you will be prompted for a value.
.Sp
Default is false.
.ie n .IP """static""" 4
.el .IP "\f(CWstatic\fR" 4
.IX Item "static"
Boolean. Default is false. \fB\s-1TODO\s0\fR: Does it work?
.ie n .IP """verbose""" 4
.el .IP "\f(CWverbose\fR" 4
.IX Item "verbose"
Boolean. Default is false. If you pass \f(CW\*(C`\-\-verbose\*(C'\fR on the command line,
both \f(CW\*(C`Devel::CheckLib\*(C'\fR and \f(CW\*(C`ExtUtils::CBuilder\*(C'\fR instances will be
configured to echo what they are doing.
.PP
If everything builds \s-1OK,\s0 but you get failures when during tests, ensure that
\&\f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR points to the location where the correct shared libraries
are located.
.PP
If you are using a custom OpenSSL build, please keep in mind that
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR must be built using the same compiler and build tools used
to build \f(CW\*(C`perl\*(C'\fR and OpenSSL. This can be more of an issue on Windows. If
you are using Active State Perl, install the MinGW package distributed by
them, and build OpenSSL using that before trying to build this module. If
you have built your own Perl using Microsoft \s-1SDK\s0 tools or IDEs, make sure
you build OpenSSL using the same tools.
.PP
Depending on your \s-1OS,\s0 pre-built OpenSSL packages may be available. To get
the require headers and import libraries, you may need to install a
development version of your operating system's OpenSSL library package. The
key is that \f(CW\*(C`Crypt::SSLeay\*(C'\fR makes calls to the OpenSSL library, and how to
do so is specified in the C header files that come with the library. Some
systems break out the header files into a separate package from that of the
libraries. Once the program has been built, you don't need the headers any
more.
.SS "Crypt::SSLeay"
.IX Subsection "Crypt::SSLeay"
The latest Crypt::SSLeay can be found at your nearest \s-1CPAN\s0 mirror, as well
as <https://metacpan.org/pod/Crypt::SSLeay>.
.PP
Once you have downloaded it, \f(CW\*(C`Crypt::SSLeay\*(C'\fR installs easily using the
standard build process:
.PP
.Vb 4
\&    $ perl Makefile.PL
\&    $ make
\&    $ make test
\&    $ make install
.Ve
.PP
or
.PP
.Vb 1
\&    $ cpanm Crypt::SSLeay
.Ve
.PP
If you have OpenSSL headers and libraries in nonstandard locations, you can
use
.PP
.Vb 1
\&    $ perl Makefile.PL \-\-incpath=... \-\-libpath=...
.Ve
.PP
If you would like to use \f(CW\*(C`cpanm\*(C'\fR with such custom locations, you can do
.PP
.Vb 1
\&    $ OPENSSL_INCLUDE=... OPENSSL_LIB=... cpanm Crypt::SSLeay
.Ve
.PP
or, on Windows,
.PP
.Vb 3
\&    > set OPENSSL_INCLUDE=...
\&    > set OPENSSL_LIB=...
\&    > cpanm Crypt::SSLeay
.Ve
.PP
If you are on Windows, and using a MinGW distribution bundled with
ActiveState Perl or Strawberry Perl, you would use \f(CW\*(C`dmake\*(C'\fR rather than
\&\f(CW\*(C`make\*(C'\fR. If you are using Microsoft's build tools, you would use \f(CW\*(C`nmake\*(C'\fR.
.PP
For unattended (batch) installations, to be absolutely certain that
\&\fIMakefile.PL\fR does not prompt for questions on \s-1STDIN,\s0 set the environment
variable \f(CW\*(C`PERL_MM_USE_DEFAULT=1\*(C'\fR as with any \s-1CPAN\s0 module built using
ExtUtils::MakeMaker.
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.PP
I do not have any experience with \s-1VMS.\s0 If OpenSSL headers and libraries are
not in standard locations searched by your build system by default, please
set things up so that they are. If you have generic instructions on how to
do it, please open a ticket on \s-1RT\s0 with the information so I can add it to
this document.
.SH "PROXY SUPPORT"
.IX Header "PROXY SUPPORT"
LWP::UserAgent and Crypt::SSLeay have their own versions of
proxy support. Please read these sections to see which one
is appropriate.
.SS "LWP::UserAgent proxy support"
.IX Subsection "LWP::UserAgent proxy support"
\&\f(CW\*(C`LWP::UserAgent\*(C'\fR has its own methods of proxying which may work for you
and is likely to be incompatible with \f(CW\*(C`Crypt::SSLeay\*(C'\fR proxy support.
To use \f(CW\*(C`LWP::UserAgent\*(C'\fR proxy support, try something like:
.PP
.Vb 2
\&    my $ua = LWP::UserAgent\->new;
\&    $ua\->proxy([qw( https http )], "$proxy_ip:$proxy_port");
.Ve
.PP
At the time of this writing, libwww v5.6 seems to proxy https requests
fine with an Apache \fImod_proxy\fR server.  It sends a line like:
.PP
.Vb 1
\&    GET https://www.example.com HTTP/1.1
.Ve
.PP
to the proxy server, which is not the \f(CW\*(C`CONNECT\*(C'\fR request that some
proxies would expect, so this may not work with other proxy servers than
\&\fImod_proxy\fR. The \f(CW\*(C`CONNECT\*(C'\fR method is used by \f(CW\*(C`Crypt::SSLeay\*(C'\fR's
internal proxy support.
.SS "Crypt::SSLeay proxy support"
.IX Subsection "Crypt::SSLeay proxy support"
For native \f(CW\*(C`Crypt::SSLeay\*(C'\fR proxy support of https requests,
you need to set the environment variable \f(CW\*(C`HTTPS_PROXY\*(C'\fR to your
proxy server and port, as in:
.PP
.Vb 3
\&    # proxy support
\&    $ENV{HTTPS_PROXY} = \*(Aqhttp://proxy_hostname_or_ip:port\*(Aq;
\&    $ENV{HTTPS_PROXY} = \*(Aq127.0.0.1:8080\*(Aq;
.Ve
.PP
Use of the \f(CW\*(C`HTTPS_PROXY\*(C'\fR environment variable in this way
is similar to \f(CW\*(C`LWP::UserAgent\-\*(C'\fR\fIenv_proxy()\fR> usage, but calling
that method will likely override or break the \f(CW\*(C`Crypt::SSLeay\*(C'\fR
support, so do not mix the two.
.PP
Basic auth credentials to the proxy server can be provided
this way:
.PP
.Vb 3
\&    # proxy_basic_auth
\&    $ENV{HTTPS_PROXY_USERNAME} = \*(Aqusername\*(Aq;
\&    $ENV{HTTPS_PROXY_PASSWORD} = \*(Aqpassword\*(Aq;
.Ve
.PP
For an example of \s-1LWP\s0 scripting with \f(CW\*(C`Crypt::SSLeay\*(C'\fR native proxy
support, please look at the \fIeg/lwp\-ssl\-test\fR script in the
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR distribution.
.SH "CLIENT CERTIFICATE SUPPORT"
.IX Header "CLIENT CERTIFICATE SUPPORT"
Client certificates are supported. \s-1PEM\s0 encoded certificate and
private key files may be used like this:
.PP
.Vb 2
\&    $ENV{HTTPS_CERT_FILE} = \*(Aqcerts/notacacert.pem\*(Aq;
\&    $ENV{HTTPS_KEY_FILE}  = \*(Aqcerts/notacakeynopass.pem\*(Aq;
.Ve
.PP
You may test your files with the \fIeg/net\-ssl\-test\fR program,
bundled with the distribution, by issuing a command like:
.PP
.Vb 2
\&    perl eg/net\-ssl\-test \-cert=certs/notacacert.pem \e
\&        \-key=certs/notacakeynopass.pem \-d GET $HOST_NAME
.Ve
.PP
Additionally, if you would like to tell the client where
the \s-1CA\s0 file is, you may set these.
.PP
.Vb 2
\&    $ENV{HTTPS_CA_FILE} = "some_file";
\&    $ENV{HTTPS_CA_DIR}  = "some_dir";
.Ve
.PP
Note that, if specified, \f(CW$ENV{HTTPS_CA_FILE}\fR must point to the actual
certificate file. That is, \f(CW$ENV{HTTPS_CA_DIR}\fR is *not* the path were
\&\f(CW$ENV{HTTPS_CA_FILE}\fR is located.
.PP
For certificates in \f(CW$ENV{HTTPS_CA_DIR}\fR to be picked up, follow the
instructions on
<http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>
.PP
There is no sample \s-1CA\s0 cert file at this time for testing,
but you may configure \fIeg/net\-ssl\-test\fR to use your \s-1CA\s0 cert
with the \-CAfile option.
.PP
(\s-1TODO:\s0 then what is the \fI./certs\fR directory in the distribution?)
.SS "Creating a test certificate"
.IX Subsection "Creating a test certificate"
To create simple test certificates with OpenSSL, you may
run the following command:
.PP
.Vb 3
\&    openssl req \-config /usr/local/openssl/openssl.cnf \e
\&        \-new \-days 365 \-newkey rsa:1024 \-x509 \e
\&        \-keyout notacakey.pem \-out notacacert.pem
.Ve
.PP
To remove the pass phrase from the key file, run:
.PP
.Vb 1
\&    openssl rsa \-in notacakey.pem \-out notacakeynopass.pem
.Ve
.SS "\s-1PKCS12\s0 support"
.IX Subsection "PKCS12 support"
The directives for enabling use of \s-1PKCS12\s0 certificates is:
.PP
.Vb 2
\&    $ENV{HTTPS_PKCS12_FILE}     = \*(Aqcerts/pkcs12.pkcs12\*(Aq;
\&    $ENV{HTTPS_PKCS12_PASSWORD} = \*(AqPKCS12_PASSWORD\*(Aq;
.Ve
.PP
Use of this type of certificate takes precedence over previous
certificate settings described.
.PP
(\s-1TODO:\s0 unclear? Meaning \*(L"the presence of this type of certificate\*(R"?)
.SH "SSL versions"
.IX Header "SSL versions"
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR tries very hard to connect to \fIany\fR \s-1SSL\s0 web server
accommodating servers that are buggy, old or simply not standards-compliant.
To this effect, this module will try \s-1SSL\s0 connections in this order:
.IP "\s-1SSL\s0 v23" 4
.IX Item "SSL v23"
should allow v2 and v3 servers to pick their best type
.IP "\s-1SSL\s0 v3" 4
.IX Item "SSL v3"
best connection type
.IP "\s-1SSL\s0 v2" 4
.IX Item "SSL v2"
old connection type
.PP
Unfortunately, some servers seem not to handle a reconnect to \s-1SSL\s0 v3 after a
failed connect of \s-1SSL\s0 v23 is tried, so you may set before using \s-1LWP\s0 or
Net::SSL:
.PP
.Vb 1
\&    $ENV{HTTPS_VERSION} = 3;
.Ve
.PP
to force a version 3 \s-1SSL\s0 connection first. At this time only a version 2 \s-1SSL\s0
connection will be tried after this, as the connection attempt order remains
unchanged by this setting.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Many thanks to the following individuals who helped improve
\&\f(CW\*(C`Crypt\-SSLeay\*(C'\fR:
.PP
\&\fIGisle Aas\fR for writing this module and many others including libwww, for
perl. The web will never be the same :)
.PP
\&\fIBen Laurie\fR deserves kudos for his excellent patches for better error
handling, \s-1SSL\s0 information inspection, and random seeding.
.PP
\&\fIDongqiang Bai\fR for host name resolution fix when using a proxy.
.PP
\&\fIStuart Horner\fR of Core Communications, Inc. who found the need for
building \f(CW\*(C`\-\-shared\*(C'\fR OpenSSL libraries.
.PP
\&\fIPavel Hlavnicka\fR for a patch for freeing memory when using a pkcs12
file, and for inspiring more robust \f(CW\*(C`read()\*(C'\fR behavior.
.PP
\&\fIJames Woodyatt\fR is a champ for finding a ridiculous memory leak that
has been the bane of many a Crypt::SSLeay user.
.PP
\&\fIBryan Hart\fR for his patch adding proxy support, and thanks to \fITobias
Manthey\fR for submitting another approach.
.PP
\&\fIAlex Rhomberg\fR for Alpha linux ccc patch.
.PP
\&\fITobias Manthey\fR for his patches for client certificate support.
.PP
\&\fIDaisuke Kuroda\fR for adding \s-1PKCS12\s0 certificate support.
.PP
\&\fIGamid Isayev\fR for \s-1CA\s0 cert support and insights into error messaging.
.PP
\&\fIJeff Long\fR for working through a tricky \s-1CA\s0 cert SSLClientVerify issue.
.PP
\&\fIChip Turner\fR for a patch to build under perl 5.8.0.
.PP
\&\fIJoshua Chamas\fR for the time he spent maintaining the module.
.PP
\&\fIJeff Lavallee\fR for help with alarms on read failures (\s-1CPAN\s0 bug #12444).
.PP
\&\fIGuenter Knauf\fR for significant improvements in configuring things in
Win32 and Netware lands and Jan Dubois for various suggestions for
improvements.
.PP
and \fImany others\fR who provided bug reports, suggestions, fixes and
patches.
.PP
If you have reported a bug or provided feedback, and you would like to be
mentioned by name in this section, please file request on
rt.cpan.org <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Crypt-SSLeay>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Net::SSL" 4
.IX Item "Net::SSL"
If you have downloaded this distribution as of a dependency of another
distribution, it's probably due to this module (which is included in
this distribution).
.IP "Net::SSLeay" 4
.IX Item "Net::SSLeay"
Net::SSLeay provides access to the OpenSSL \s-1API\s0 directly
from Perl. See <https://metacpan.org/pod/Net::SSLeay/>.
.IP "Building OpenSSL on 64\-bit Windows 8.1 Pro using \s-1SDK\s0 tools" 4
.IX Item "Building OpenSSL on 64-bit Windows 8.1 Pro using SDK tools"
My blog post <http://blog.nu42.com/2014/04/building\-openssl\-101g\-on\-64\-bit\-windows.html> might be helpful.
.SH "SUPPORT"
.IX Header "SUPPORT"
For issues related to using of \f(CW\*(C`Crypt::SSLeay\*(C'\fR & \f(CW\*(C`Net::SSL\*(C'\fR with Perl's
\&\s-1LWP\s0, please send email to \f(CW\*(C`libwww@perl.org\*(C'\fR.
.PP
For OpenSSL or general \s-1SSL\s0 support, including issues associated with
building and installing OpenSSL on your system, please email the OpenSSL
users mailing list at \f(CW\*(C`openssl\-users@openssl.org\*(C'\fR. See
<http://www.openssl.org/support/community.html> for other mailing lists
and archives.
.PP
Please report all bugs using
rt.cpan.org <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Crypt-SSLeay>.
.SH "AUTHORS"
.IX Header "AUTHORS"
This module was originally written by Gisle Aas, and was subsequently
maintained by Joshua Chamas, David Landgren, brian d foy and Sinan Unur.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010\-2014 A. Sinan Unur
.PP
Copyright (c) 2006\-2007 David Landgren
.PP
Copyright (c) 1999\-2003 Joshua Chamas
.PP
Copyright (c) 1998 Gisle Aas
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the terms of Artistic License 2.0 (see
<http://www.perlfoundation.org/artistic_license_2_0>).
