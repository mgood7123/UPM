.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Declare::Constraints::Simple::Library::Scalar 3"
.TH Declare::Constraints::Simple::Library::Scalar 3 "2006-09-11" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Declare::Constraints::Simple::Library::Scalar \- Scalar Constraints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # match one of a set of regexes
\&  my $some_regexes = Matches(qr/foo/, qr/bar/);
\&
\&  # allow only defined values
\&  my $is_defined = IsDefined;
\&
\&  # between 5 and 50 chars
\&  my $five_to_fifty = HasLength(5, 50);
\&
\&  # match against a set of values
\&  my $command_constraint = IsOneOf(qw(create update delete));
\&
\&  # check for trueness
\&  my $is_true = IsTrue;
\&
\&  # simple equality
\&  my $is_foo = IsEq(\*(Aqfoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This library contains all constraints to validate scalar values.
.SH "CONSTRAINTS"
.IX Header "CONSTRAINTS"
.SS "Matches(@regex)"
.IX Subsection "Matches(@regex)"
.Vb 1
\&  my $c = Matches(qr/foo/, qr/bar/);
.Ve
.PP
If one of the parameters matches the expression, this is true.
.SS "\fIIsDefined()\fP"
.IX Subsection "IsDefined()"
True if the value is defined.
.SS "HasLength([$min, [$max]])"
.IX Subsection "HasLength([$min, [$max]])"
Is true if the value has a length above \f(CW$min\fR (which defaults to 1> and,
if supplied, under the value of \f(CW$max\fR. A simple
.PP
.Vb 1
\&  my $c = HasLength;
.Ve
.PP
checks if the value has a length of at least 1.
.SS "IsOneOf(@values)"
.IX Subsection "IsOneOf(@values)"
True if one of the \f(CW@values\fR equals the passed value. \f(CW\*(C`undef\*(C'\fR values
work with this too, so
.PP
.Vb 1
\&  my $c = IsOneOf(1, 2, undef);
.Ve
.PP
will return true on an undefined value.
.SS "\fIIsTrue()\fP"
.IX Subsection "IsTrue()"
True if the value evulates to true in boolean context.
.SS "IsEq($comparator)"
.IX Subsection "IsEq($comparator)"
Valid if the value is \f(CW\*(C`eq\*(C'\fR the \f(CW$comparator\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Declare::Constraints::Simple, Declare::Constraints::Simple::Library
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert 'phaylon' Sedlacek \f(CW\*(C`<phaylon@dunkelheit.at>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This module is free software, you can redistribute it and/or modify it 
under the same terms as perl itself.
