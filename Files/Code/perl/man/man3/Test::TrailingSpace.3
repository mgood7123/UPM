.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::TrailingSpace 3"
.TH Test::TrailingSpace 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::TrailingSpace \- test for trailing space in source files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::TrailingSpace;
\&
\&    my $finder = Test::TrailingSpace\->new(
\&        {
\&            root => \*(Aq.\*(Aq,
\&            filename_regex => qr/\e.(?:t|pm|pl)\ez/,
\&        },
\&    );
\&
\&    # TEST
\&    $finder\->no_trailing_space(
\&        "No trailing space was found."
\&    );
.Ve
.PP
Or, if you want the test to be optional:
.PP
.Vb 1
\&    use Test::More;
\&
\&    eval "use Test::TrailingSpace";
\&    if ($@)
\&    {
\&        plan skip_all => "Test::TrailingSpace required for trailing space test.";
\&    }
\&    else
\&    {
\&        plan tests => 1;
\&    }
\&
\&    my $finder = Test::TrailingSpace\->new(
\&        {
\&            root => \*(Aq.\*(Aq,
\&            filename_regex => qr/\e.(?:t|pm|pl)\ez/,
\&        },
\&    );
\&
\&    # TEST
\&    $finder\->no_trailing_space(
\&        "No trailing space was found."
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to test for lack of trailing space. See the synopsis
for more details.
.PP
\&\fB\s-1NOTE:\s0\fR there is an older \s-1CPAN\s0 distribution titled Test::EOL that also
supports testing for trailing space / trailing whitespace, although it
has some limitations that Test::TrailingSpace does not have, and also
only calls it \*(L"trailing whitespace\*(R", rather than \*(L"trailing space\*(R".
Whenever possible, one should prefer to use it, instead of this module.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new({ root => ""."", filename_regex => qr/\e. ... \ez/,})"
.el .SS "new({ root => ``.'', filename_regex => qr/\e. ... \ez/,})"
.IX Subsection "new({ root => ., filename_regex => qr/. ... z/,})"
Constructs a new object with the root (that defaults to \*(L".\*(R" and
the filename matching regular expression. All the files under root
matching the pattern will be searched (excpet for those under version
control directories, \*(L"blib\*(R", \*(L"_build\*(R", etc.).
.PP
The \f(CW\*(Aqabs_path_prune_re\*(Aq\fR parameter can be used to specify a regular
expression to prune the absolute path based on, so as to ignore what is
under there.
.PP
So
.PP
.Vb 7
\&    my $finder = Test::TrailingSpace\->new(
\&        {
\&            root => \*(Aq.\*(Aq,
\&            filename_regex => qr/\e.(?:t|pm|pl)\ez/,
\&            abs_path_prune_re => qr#\eAlib/sample\-data#,
\&        }
\&    );
.Ve
.PP
Will ignore everything under \f(CW\*(C`lib/sample\-data\*(C'\fR . Note that as of
Test::TrailingSpace version 0.0300 it can also be used to skip files with
these filenames (e.g: \f(CW\*(C`abs_path_prune_re => qr#\e.patch\ez#\*(C'\fR).
.ie n .SS "$finder\->no_trailing_space($blurb)"
.el .SS "\f(CW$finder\fP\->no_trailing_space($blurb)"
.IX Subsection "$finder->no_trailing_space($blurb)"
Determines if there is no trailing space in the source files. Returns true
if no trailing space was found, and false if trailing space was found.
It is equivalent to \fITest::More::ok()\fR, with diagnostics to report if there is
trailing space.
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomi Fish, <http://www.shlomifish.org/> .
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Test::EOL
.Sp
Test::EOL
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2012 Shlomi Fish.
.PP
This program is distributed under the \s-1MIT\s0 (X11) License:
<http://www.opensource.org/licenses/mit\-license.php>
.PP
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the \*(L"Software\*(R"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:
.PP
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.\s0
