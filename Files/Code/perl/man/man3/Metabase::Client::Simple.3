.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Metabase::Client::Simple 3"
.TH Metabase::Client::Simple 3 "2016-03-03" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Metabase::Client::Simple \- a client that submits to Metabase servers
.SH "VERSION"
.IX Header "VERSION"
version 0.012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Metabase::Client::Simple;
\&  use Metabase::User::Profile;
\&  use Metabase::User::Secret;
\&
\&  my $profile = Metabase::User::Profile\->load(\*(Aquser.profile.json\*(Aq);
\&  my $secret  = Metabase::User::Secret \->load(\*(Aquser.secret.json\*(Aq );
\&
\&  my $client = Metabase::Client::Simple\->new({
\&    profile => $profile,
\&    secret  => $secret,
\&    uri     => \*(Aqhttp://metabase.example.com/\*(Aq,
\&  });
\&
\&  my $fact = generate_metabase_fact;
\&
\&  $client\->submit_fact($fact);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Metabase::Client::Simple provides is extremely simple, lightweight library for
submitting facts to a Metabase web server.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $client = Metabase::Client::Simple\->new(\e%arg)
.Ve
.PP
This is the object constructor.
.PP
Valid arguments are:
.PP
.Vb 3
\&  profile \- a Metabase::User::Profile object
\&  secret  \- a Metabase::User::Secret object
\&  uri     \- the root URI for the metabase server
.Ve
.PP
If you use a \f(CW\*(C`uri\*(C'\fR argument with the 'https' scheme, you must have
IO::Socket::SSL and Net::SSLeay installed.  You may also
require Mozilla::CA.
.SS "submit_fact"
.IX Subsection "submit_fact"
.Vb 1
\&  $client\->submit_fact($fact);
.Ve
.PP
This method will submit a Metabase::Fact object to the
client's server.  On success, it will return a true value.  On failure, it will
raise an exception.
.SS "guid_exists"
.IX Subsection "guid_exists"
.Vb 1
\&  $client\->guid_exists(\*(Aq2f8519c6\-24cf\-11df\-90b1\-0018f34ec37c\*(Aq);
.Ve
.PP
This method will check whether the given \s-1GUID\s0 is found on the metabase server.
The \s-1GUID\s0 must be in lower-case, string form.  It will return true or false.
Note that a server error will also result in a false value.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $client\->register;
.Ve
.PP
This method will submit the user credentials to the metabase server.  It will
be called automatically by \f(CW\*(C`submit_fact\*(C'\fR if necessary.   You generally won't
need to use it.  On success, it will return a true value.  On failure, it will
raise an exception.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/cpan\-testers/Metabase\-Client\-Simple/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/cpan\-testers/Metabase\-Client\-Simple>
.PP
.Vb 1
\&  git clone https://github.com/cpan\-testers/Metabase\-Client\-Simple.git
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Alexandr Ciornii <alexchorny@gmail.com>
.IP "\(bu" 4
David Steinbrunner <dsteinbrunner@pobox.com>
.IP "\(bu" 4
James McCoy <vega.james@gmail.com>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
