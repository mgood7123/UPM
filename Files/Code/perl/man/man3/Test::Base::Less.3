.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Base::Less 3"
.TH Test::Base::Less 3 "2017-10-02" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Base::Less \- Limited version of Test::Base.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Base::Less;
\&
\&    filters {
\&        input => [qw/eval/],
\&    };
\&
\&    for my $block (blocks) {
\&        is($block\->input, $block\->expected);
\&    }
\&    done_testing;
\&
\&    _\|_DATA_\|_
\&
\&    ===
\&    \-\-\- input: 4*2
\&    \-\-\- expected: 8
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a less clever version of Test::Base.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
This module exports all Test::More's exportable functions, and following functions:
.IP "filters(+{ } : HashRef);" 4
.IX Item "filters(+{ } : HashRef);"
.Vb 3
\&    filters {
\&        input => [qw/eval/],
\&    };
.Ve
.Sp
Set a filter for the section name.
.IP "\fIblocks()\fR" 4
.IX Item "blocks()"
Get a list of Text::TestBase::Block as filtered.
.ie n .IP "register_filter($name: Str, $code: CodeRef)" 4
.el .IP "register_filter($name: Str, \f(CW$code:\fR CodeRef)" 4
.IX Item "register_filter($name: Str, $code: CodeRef)"
Register a filter for \f(CW$name\fR using \f(CW$code\fR.
.SH "DEFAULT FILTERS"
.IX Header "DEFAULT FILTERS"
This module provides only few filters. If you want to add more filters, pull-reqs welcome.
(I only merge a patch using no depended modules)
.IP "eval" 4
.IX Item "eval"
\&\fIeval()\fR the code.
.IP "chomp" 4
.IX Item "chomp"
\&\f(CW\*(C`chomp()\*(C'\fR the arguments.
.IP "uc" 4
.IX Item "uc"
\&\f(CW\*(C`uc()\*(C'\fR the arguments.
.IP "trim" 4
.IX Item "trim"
Remove extra blank lines from the beginning and end of the data. This
allows you to visually separate your test data with blank lines.
.IP "lines" 4
.IX Item "lines"
Break the data into an anonymous array of lines.
Each line (except possibly the last one if the chomp filter came first)
will have a newline at the end.
.SH "REGISTER YOUR OWN FILTER"
.IX Header "REGISTER YOUR OWN FILTER"
You can register your own filter by following form:
.PP
.Vb 2
\&    use Digest::MD5 qw/md5_hex/;
\&    Test::Base::Less::register_filter(md5_hex => \e&md5_hex);
.Ve
.SH "USE CODEREF AS FILTER"
.IX Header "USE CODEREF AS FILTER"
You can use a CodeRef as filter.
.PP
.Vb 4
\&    use Digest::MD5 qw/md5_hex/;
\&    filters {
\&        input => [\e&md5_hex],
\&    };
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Most of code is taken from Test::Base. Thanks Ingy.
