.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Tokenizer 3"
.TH PPIx::Regexp::Tokenizer 3 "2017-10-01" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Tokenizer \- Tokenize a regular expression
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use PPIx::Regexp::Dumper;
\& PPIx::Regexp::Dumper\->new( \*(Aqqr{foo}smx\*(Aq )
\&     \->print();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
\&\f(CW\*(C`PPIx::Regexp::Tokenizer\*(C'\fR is a
PPIx::Regexp::Support.
.PP
\&\f(CW\*(C`PPIx::Regexp::Tokenizer\*(C'\fR has no descendants.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides tokenization of the regular expression.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following public methods. Methods not documented
here (or documented below under \*(L"\s-1EXTERNAL TOKENIZERS\*(R"\s0) are private,
and unsupported in the sense that the author reserves the right to
change or remove them without notice.
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $tokenizer = PPIx::Regexp::Tokenizer\->new( \*(Aqxyzzy\*(Aq );
.Ve
.PP
This static method instantiates the tokenizer. You must pass it the
regular expression to be parsed, either as a string or as a
PPI::Element of some sort. You can also pass optional
name/value pairs of arguments. The option names are specified \fBwithout\fR
a leading dash. Supported options are:
.IP "default_modifiers array_reference" 4
.IX Item "default_modifiers array_reference"
This argument specifies default statement modifiers. It is optional, but
if specified must be an array reference. See the
PPIx::Regexp \fInew()\fR documentation for
the details.
.IP "encoding name" 4
.IX Item "encoding name"
This option specifies the encoding of the string to be tokenized. If
specified, an \f(CW\*(C`Encode::decode\*(C'\fR is done on the string (or the \f(CW\*(C`content\*(C'\fR
of the \s-1PPI\s0 class) before it is tokenized.
.IP "postderef boolean" 4
.IX Item "postderef boolean"
This option specifies whether the tokenizer recognizes postfix
dereferencing. See the PPIx::Regexp
\&\fInew()\fR documentation for the details.
.Sp
\&\f(CW$PPIx::Regexp::Tokenizer::DEFAULT_POSTDEREF\fR is not exported.
.IP "strict boolean" 4
.IX Item "strict boolean"
This option specifies whether tokenization should assume
\&\f(CW\*(C`use re \*(Aqstrict\*(Aq;\*(C'\fR is in effect.
.Sp
The \f(CW\*(Aqstrict\*(Aq\fR pragma was introduced in Perl 5.22, and its
documentation says that it is experimental, and that there is no
commitment to backward compatibility. The same applies to the
tokenization produced when this option is asserted.
.IP "trace number" 4
.IX Item "trace number"
Specifying a positive value for this option causes a trace of the
tokenization. This option is unsupported in the sense that the author
reserves the right to alter it without notice.
.Sp
If this option is unspecified, the value comes from environment variable
\&\f(CW\*(C`PPIX_REGEXP_TOKENIZER_TRACE\*(C'\fR (see \*(L"\s-1ENVIRONMENT VARIABLES\*(R"\s0). If this
environment variable does not exist, the default is 0.
.PP
Undocumented options are unsupported.
.PP
The returned value is the instantiated tokenizer, or \f(CW\*(C`undef\*(C'\fR if
instantiation failed. In the latter case a call to \*(L"errstr\*(R" will
return the reason.
.SS "content"
.IX Subsection "content"
.Vb 1
\& print $tokenizer\->content();
.Ve
.PP
This method returns the string being tokenized. This will be the result
of the PPI::Element\->\fIcontent()\fR method if the
object was instantiated with a PPI::Element.
.SS "default_modifiers"
.IX Subsection "default_modifiers"
.Vb 1
\& print join \*(Aq, \*(Aq, @{ $tokenizer\->default_modifiers() };
.Ve
.PP
This method returns a reference to a copy of the array passed to the
\&\f(CW\*(C`default_modifiers\*(C'\fR argument to \fInew()\fR. If this argument was not
used to instantiate the object, the return is a reference to an empty
array.
.SS "encoding"
.IX Subsection "encoding"
This method returns the encoding of the data being parsed, if one was
set when the class was instantiated; otherwise it simply returns undef.
.SS "errstr"
.IX Subsection "errstr"
.Vb 2
\& my $tokenizer = PPIx::Regexp::Tokenizer\->new( \*(Aqxyzzy\*(Aq )
\&     or die PPIx::Regexp::Tokenizer\->errstr();
.Ve
.PP
This static method returns an error description if tokenizer
instantiation failed.
.SS "failures"
.IX Subsection "failures"
.Vb 1
\& print $tokenizer\->failures(), " tokenization failures\en";
.Ve
.PP
This method returns the number of tokenization failures encountered. A
tokenization failure is represented in the output token stream by a
PPIx::Regexp::Token::Unknown.
.SS "modifier"
.IX Subsection "modifier"
.Vb 2
\& $tokenizer\->modifier( \*(Aqx\*(Aq )
\&     and print "Tokenizing an extended regular expression\en";
.Ve
.PP
This method returns true if the given modifier character was found on
the end of the regular expression, and false otherwise.
.PP
Starting with version 0.036_01, if the argument is a
single-character modifier followed by an asterisk (intended as a wild
card character), the return is the number of times that modifier
appears. In this case an exception will be thrown if you specify a
multi-character modifier (e.g.  \f(CW\*(Aqee*\*(Aq\fR), or if you specify one of the
match semantics modifiers (e.g.  \f(CW\*(Aqa*\*(Aq\fR).
.SS "next_token"
.IX Subsection "next_token"
.Vb 1
\& my $token = $tokenizer\->next_token();
.Ve
.PP
This method returns the next token in the token stream, or nothing if
there are no more tokens.
.SS "significant"
.IX Subsection "significant"
This method exists simply for the convenience of
PPIx::Regexp::Dumper. It always returns true.
.SS "tokens"
.IX Subsection "tokens"
.Vb 1
\& my @tokens = $tokenizer\->tokens();
.Ve
.PP
This method returns all remaining tokens in the token stream.
.SH "EXTERNAL TOKENIZERS"
.IX Header "EXTERNAL TOKENIZERS"
This class does very little of its own tokenization. Instead the token
classes contain external tokenization routines, whose name is
\&'_\|_PPIX_TOKENIZER_\|_' concatenated with the current mode of the tokenizer
('regexp' for regular expressions, 'repl' for the replacement string).
.PP
These external tokenizers are called as static methods, and passed the
\&\f(CW\*(C`PPIx::Regexp::Tokenizer\*(C'\fR object and the current character in the
character stream.
.PP
If the external tokenizer wants to make one or more tokens, it returns
an array containing either length in characters for tokens of the
tokenizer's own class, or the results of one or more \*(L"make_token\*(R"
calls for tokens of an arbitrary class.
.PP
If the external tokenizer is not interested in the characters starting
at the current position it simply returns.
.PP
The following methods are for the use of external tokenizers, and \fBare
not part of the public interface to this class.\fR
.SS "capture"
.IX Subsection "capture"
.Vb 5
\& if ( $tokenizer\->find_regexp( qr{ \eA ( foo ) }smx ) ) {
\&     foreach ( $tokenizer\->capture() ) {
\&         print "$_\en";
\&     }
\& }
.Ve
.PP
This method returns all the contents of any capture buffers from the
previous call to \*(L"find_regexp\*(R". The first element of the array (i.e.
element 0) corresponds to \f(CW$1\fR, and so on.
.PP
The captures are cleared by \*(L"make_token\*(R", as well as by another call
to \*(L"find_regexp\*(R".
.SS "cookie"
.IX Subsection "cookie"
.Vb 3
\& $tokenizer\->cookie( foo => sub { 1 } );
\& my $cookie = $tokenizer\->cookie( \*(Aqfoo\*(Aq );
\& my $old_hint = $tokenizer\->cookie( foo => undef );
.Ve
.PP
This method either creates, deletes, or accesses a cookie.
.PP
A cookie is a code reference which is called whenever the tokenizer makes
a token. If it returns a false value, it is deleted. Explicitly setting
the cookie to \f(CW\*(C`undef\*(C'\fR also deletes it.
.PP
When you call \f(CW\*(C`$tokenizer\->cookie( \*(Aqfoo\*(Aq )\*(C'\fR, the current cookie is
returned. If you pass a new value of \f(CW\*(C`undef\*(C'\fR to delete the token, the
deleted cookie (if any) is returned.
.PP
When the \*(L"make_token\*(R" method calls a cookie, it passes it the tokenizer
and the token just made. If a token calls a cookie, it is recommended that
it merely pass the tokenizer, though of course the token can do whatever
it wants.
.PP
The cookie mechanism seems to be a bit of a crock, but it appeared to be
more work to fix things up in the lexer after the tokenizer got
something wrong.
.PP
The recommended way to write a cookie is to use a closure to store any
necessary data, and have a call to the cookie return the data; otherwise
the ultimate consumer of the cookie has no way to access the data. Of
course, it may be that the presence of the cookie at a certain point in
the parse is all that is required.
.SS "expect"
.IX Subsection "expect"
.Vb 1
\& $tokenizer\->expect( \*(AqPPIx::Regexp::Token::Code\*(Aq );
.Ve
.PP
This method inserts a given class at the head of the token scan, for the
next iteration only. More than one class can be specified. Class names
can be abbreviated by removing the leading 'PPIx::Regexp::'.
.PP
If no class is specified, this method does nothing.
.PP
The expectation lasts from the next time \*(L"get_token\*(R" is called until
the next time make_token makes a significant token, or until the next
\&\f(CW\*(C`expect\*(C'\fR call if that is done sooner.
.SS "find_regexp"
.IX Subsection "find_regexp"
.Vb 3
\& my $end = $tokenizer\->find_regexp( qr{ \eA \ew+ }smx );
\& my ( $begin, $end ) = $tokenizer\->find_regexp(
\&     qr{ \eA \ew+ }smx );
.Ve
.PP
This method finds the given regular expression in the content, starting
at the current position. If called in scalar context, the offset from
the current position to the end of the matched string is returned. If
called in list context, the offsets to both the beginning and the end of
the matched string are returned.
.SS "find_matching_delimiter"
.IX Subsection "find_matching_delimiter"
.Vb 1
\& my $offset = $tokenizer\->find_matching_delimiter();
.Ve
.PP
This method is used by tokenizers to find the delimiter matching the
character at the current position in the content string. If the
delimiter is an opening bracket of some sort, bracket nesting will be
taken into account.
.PP
When searching for the matching delimiter, the back slash character is
considered to escape the following character, so back-slashed delimiters
will be ignored. No other quoting mechanisms are recognized, though, so
delimiters inside quotes still count. This is actually the way Perl
works, as
.PP
.Vb 1
\& $ perl \-e \*(Aqqr<(?{ print "}" })>\*(Aq
.Ve
.PP
demonstrates.
.PP
This method returns the offset from the current position in the content
string to the matching delimiter (which will always be positive), or
undef if no match can be found.
.SS "get_mode"
.IX Subsection "get_mode"
This method returns the name of the current mode of the tokenizer.
.SS "get_start_delimiter"
.IX Subsection "get_start_delimiter"
.Vb 1
\& my $start_delimiter = $tokenizer\->get_start_delimiter();
.Ve
.PP
This method is used by tokenizers to access the start delimiter for the
regular expression.
.SS "get_token"
.IX Subsection "get_token"
.Vb 2
\& my $token = $tokenizer\->make_token( 3 );
\& my @tokens = $tokenizer\->get_token();
.Ve
.PP
This method returns the next token that can be made from the input
stream. It is \fBnot\fR part of the external interface, but is intended for
the use of an external tokenizer which calls it after making and
retaining its own token to look at the next token ( if any ) in the
input stream.
.PP
If any external tokenizer calls get_token without first calling
make_token, a fatal error occurs; this is better than the infinite
recursion which would occur if the condition were not trapped.
.PP
An external tokenizer \fBmust\fR return anything returned by get_token;
otherwise tokens get lost.
.SS "interpolates"
.IX Subsection "interpolates"
This method returns true if the top-level structure being tokenized
interpolates; that is, if the delimiter is not a single quote.
.SS "make_token"
.IX Subsection "make_token"
.Vb 1
\& return $tokenizer\->make_token( 3, \*(AqPPIx::Regexp::Token::Unknown\*(Aq );
.Ve
.PP
This method is used by this class (and possibly by individual
tokenizers) to manufacture a token. Its arguments are the number of
characters to include in the token, and optionally the class of the
token. If no class name is given, the caller's class is used. Class
names may be shortened by removing the initial 'PPIx::Regexp::', which
will be restored by this method.
.PP
The token will be manufactured from the given number of characters
starting at the current cursor position, which will be adjusted.
.PP
If the given length would include characters past the end of the string
being tokenized, the length is reduced appropriately. If this means a
token with no characters, nothing is returned.
.SS "match"
.IX Subsection "match"
.Vb 3
\& if ( $tokenizer\->find_regexp( qr{ \eA \ew+ }smx ) ) {
\&     print $tokenizer\->match(), "\en";
\& }
.Ve
.PP
This method returns the string matched by the previous call to
\&\*(L"find_regexp\*(R".
.PP
The match is set to \f(CW\*(C`undef\*(C'\fR by \*(L"make_token\*(R", as well as by another
call to \*(L"find_regexp\*(R".
.SS "modifier_duplicate"
.IX Subsection "modifier_duplicate"
.Vb 1
\& $tokenizer\->modifier_duplicate();
.Ve
.PP
This method duplicates the modifiers on the top of the modifier stack,
with the intent of creating a locally-scoped copy of the modifiers. This
should only be called by an external tokenizer that is actually creating
a modifier scope. In other words, only when creating a
PPIx::Regexp::Token::Structure token
whose content is '('.
.SS "modifier_modify"
.IX Subsection "modifier_modify"
.Vb 1
\& $tokenizer\->modifier_modify( name => $value ... );
.Ve
.PP
This method sets new values for the modifiers in the local scope. Only
the modifiers whose names are actually passed have their values changed.
.PP
This method is intended to be called after manufacturing a
PPIx::Regexp::Token::Modifier token,
and passed the results of its \f(CW\*(C`modifiers\*(C'\fR method.
.SS "modifier_pop"
.IX Subsection "modifier_pop"
.Vb 1
\& $tokenizer\->modifier_pop();
.Ve
.PP
This method removes the modifiers on the top of the modifier stack. This
should only be called by an external tokenizer that is ending a modifier
scope. In other words, only when creating a
PPIx::Regexp::Token::Structure token
whose content is ')'.
.PP
Note that this method will never pop the last modifier item off the
stack, to guard against unmatched right parentheses.
.SS "peek"
.IX Subsection "peek"
.Vb 2
\& my $character = $tokenizer\->peek();
\& my $next_char = $tokenizer\->peek( 1 );
.Ve
.PP
This method returns the character at the given non-negative offset from
the current position. If no offset is given, an offset of 0 is used.
.PP
If you ask for a negative offset or an offset off the end of the sting,
\&\f(CW\*(C`undef\*(C'\fR is returned.
.SS "ppi_document"
.IX Subsection "ppi_document"
This method makes a \s-1PPI\s0 document out of the remainder of the string, and
returns it.
.SS "prior"
.IX Subsection "prior"
.Vb 2
\& $tokenizer\->prior( \*(Aqcan_be_quantified\*(Aq )
\&    and print "The prior token can be quantified.\en";
.Ve
.PP
This method is deprecated in favor of
\&\fIprior_significant_tokrn()\fR. It will warn on
the first use. Six months after the release of version 0.050_01
it will start warning on every use. Six months after that a fatal
exception will be thrown when it is called. I am not sure I need to put
this though a deprecation cycle, given that this method is documented as
not being part of the public interface, but I choose to err on the side
of caution.
.PP
This method calls the named method on the most-recently-instantiated
significant token, and returns the result. Any arguments subsequent to
the method name will be passed to the method.
.PP
Because this method is designed to be used within the tokenizing system,
it will die horribly if the named method does not exist.
.PP
If called with no arguments at all the most-recently-instantiated
significant token is returned.
.SS "prior_significant_token"
.IX Subsection "prior_significant_token"
.Vb 2
\& $tokenizer\->prior_significant_token( \*(Aqcan_be_quantified\*(Aq )
\&    and print "The prior token can be quantified.\en";
.Ve
.PP
This method calls the named method on the most-recently-instantiated
significant token, and returns the result. Any arguments subsequent to
the method name will be passed to the method.
.PP
Because this method is designed to be used within the tokenizing system,
it will die horribly if the named method does not exist.
.PP
If called with no arguments at all the most-recently-instantiated
significant token is returned.
.SS "strict"
.IX Subsection "strict"
.Vb 1
\& say \*(AqParse is \*(Aq, $tokenizer\->strict() ? \*(Aqstrict\*(Aq : \*(Aqlenient\*(Aq;
.Ve
.PP
This method simply returns true or false, depending on whether the
\&\f(CW\*(Aqstrict\*(Aq\fR option to \f(CW\*(C`new()\*(C'\fR was true or false.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
A tokenizer trace can be requested by setting environment variable
\&\s-1PPIX_REGEXP_TOKENIZER_TRACE\s0 to a numeric value other than 0. Use of this
environment variable is unsupported in the same sense that the \f(CW\*(C`trace\*(C'\fR
option of \*(L"new\*(R" is unsupported. Explicitly specifying the \f(CW\*(C`trace\*(C'\fR
option to \*(L"new\*(R" overrides the environment variable.
.PP
The real reason this is documented is to give the user a way to
troubleshoot funny output from the tokenizer.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III\s0 \fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
