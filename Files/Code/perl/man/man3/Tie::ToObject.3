.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Tie::ToObject 3"
.TH Tie::ToObject 3 "2008-01-17" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tie::ToObject \- Tie to an existing object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Tie::ToObject;
\&
\&        my $stolen = tied(%something);
\&
\&        tie %something_else, \*(AqTie::ToObject\*(Aq, $stolen;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
While \*(L"tie\*(R" in perldoc allows tying to an arbitrary object, the class in question
must support this in it's implementation of \f(CW\*(C`TIEHASH\*(C'\fR, \f(CW\*(C`TIEARRAY\*(C'\fR or
whatever.
.PP
This class provides a very tie constructor that simply returns the object it
was given as it's first argument.
.PP
This way side effects of calling \f(CW\*(C`$object\->TIEHASH\*(C'\fR are avoided.
.PP
This is used in Data::Visitor in order to tie a variable to an already
existing object. This is also useful for cloning, when you want to clone the
internal state object instead of going through the tie interface for that
variable.
.SH "VERSION CONTROL"
.IX Header "VERSION CONTROL"
This module is maintained using Darcs. You can get the latest version from
<http://nothingmuch.woobling.org/code>, and use \f(CW\*(C`darcs send\*(C'\fR to commit
changes.
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&        Copyright (c) 2008 Yuval Kogman. All rights reserved
\&        This program is free software; you can redistribute
\&        it and/or modify it under the same terms as Perl itself.
.Ve
