.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Net::DNS::RR::NSEC3PARAM 3"
.TH Net::DNS::RR::NSEC3PARAM 3 "2017-08-18" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::RR::NSEC3PARAM \- DNS NSEC3PARAM resource record
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::DNS;
\&    $rr = new Net::DNS::RR(\*(Aqname NSEC3PARAM algorithm flags iterations salt\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Class for \s-1DNSSEC NSEC3PARAM\s0 resource records.
.PP
The \s-1NSEC3PARAM RR\s0 contains the \s-1NSEC3\s0 parameters (hash algorithm,
flags, iterations and salt) needed to calculate hashed ownernames.
.PP
The presence of an \s-1NSEC3PARAM RR\s0 at a zone apex indicates that the
specified parameters may be used by authoritative servers to choose
an appropriate set of \s-1NSEC3\s0 records for negative responses.
.PP
The \s-1NSEC3PARAM RR\s0 is not used by validators or resolvers.
.SH "METHODS"
.IX Header "METHODS"
The available methods are those inherited from the base class augmented
by the type-specific methods defined in this package.
.PP
Use of undocumented package features or direct access to internal data
structures is discouraged and could result in program termination or
other unpredictable behaviour.
.SS "algorithm"
.IX Subsection "algorithm"
.Vb 2
\&    $algorithm = $rr\->algorithm;
\&    $rr\->algorithm( $algorithm );
.Ve
.PP
The Hash Algorithm field is represented as an unsigned decimal
integer.  The value has a maximum of 255.
.SS "flags"
.IX Subsection "flags"
.Vb 2
\&    $flags = $rr\->flags;
\&    $rr\->flags( $flags );
.Ve
.PP
The Flags field is represented as an unsigned decimal integer.
The value has a maximum of 255.
.SS "iterations"
.IX Subsection "iterations"
.Vb 2
\&    $iterations = $rr\->iterations;
\&    $rr\->iterations( $iterations );
.Ve
.PP
The Iterations field is represented as an unsigned decimal
integer.  The value is between 0 and 65535, inclusive.
.SS "salt"
.IX Subsection "salt"
.Vb 2
\&    $salt = $rr\->salt;
\&    $rr\->salt( $salt );
.Ve
.PP
The Salt field is represented as a contiguous sequence of hexadecimal
digits. A \*(L"\-\*(R" (unquoted) is used in string format to indicate that the
salt field is absent.
.SS "saltbin"
.IX Subsection "saltbin"
.Vb 2
\&    $saltbin = $rr\->saltbin;
\&    $rr\->saltbin( $saltbin );
.Ve
.PP
The Salt field as a sequence of octets.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)2007,2008 NLnet Labs.  Author Olaf M. Kolkman
.PP
All rights reserved.
.PP
Package template (c)2009,2012 O.M.Kolkman and R.W.Franks.
.SH "LICENSE"
.IX Header "LICENSE"
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided
that the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation, and that the name of the author not be used in advertising
or publicity pertaining to distribution of the software without specific
prior written permission.
.PP
\&\s-1THE SOFTWARE IS PROVIDED \*(L"AS IS\*(R", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::RR, \s-1RFC5155\s0
